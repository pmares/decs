// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_decs_2eproto__INCLUDED
#define PROTOBUF_decs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace decs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_decs_2eproto();
void protobuf_AssignDesc_decs_2eproto();
void protobuf_ShutdownFile_decs_2eproto();

class Header;
class Header_Description;
class Header_Description_Link;
class Header_Description_Author;
class Header_ElementList;
class Header_Problem;
class Header_Result;

enum Header_Problem_ResultStrategy {
  Header_Problem_ResultStrategy_COUNT = 0,
  Header_Problem_ResultStrategy_FULL = 1
};
const ::google::protobuf::EnumDescriptor* Header_Problem_ResultStrategy_descriptor();
bool Header_Problem_ResultStrategy_IsValid(int value);
const Header_Problem_ResultStrategy Header_Problem_ResultStrategy_ResultStrategy_MIN = Header_Problem_ResultStrategy_COUNT;
const Header_Problem_ResultStrategy Header_Problem_ResultStrategy_ResultStrategy_MAX = Header_Problem_ResultStrategy_FULL;

inline const ::std::string& Header_Problem_ResultStrategy_Name(Header_Problem_ResultStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Problem_ResultStrategy_descriptor(), value);
}
inline bool Header_Problem_ResultStrategy_Parse(
    const ::std::string& name, Header_Problem_ResultStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Problem_ResultStrategy>(
    Header_Problem_ResultStrategy_descriptor(), name, value);
}
enum Header_Result_ResultState {
  Header_Result_ResultState_COMPLETE = 0,
  Header_Result_ResultState_PARTIAL = 1
};
const ::google::protobuf::EnumDescriptor* Header_Result_ResultState_descriptor();
bool Header_Result_ResultState_IsValid(int value);
const Header_Result_ResultState Header_Result_ResultState_ResultState_MIN = Header_Result_ResultState_COMPLETE;
const Header_Result_ResultState Header_Result_ResultState_ResultState_MAX = Header_Result_ResultState_PARTIAL;

inline const ::std::string& Header_Result_ResultState_Name(Header_Result_ResultState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Result_ResultState_descriptor(), value);
}
inline bool Header_Result_ResultState_Parse(
    const ::std::string& name, Header_Result_ResultState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Result_ResultState>(
    Header_Result_ResultState_descriptor(), name, value);
}
// ===================================================================

class Header_Description_Link : public ::google::protobuf::Message {
 public:
  Header_Description_Link();
  virtual ~Header_Description_Link();
  
  Header_Description_Link(const Header_Description_Link& from);
  
  inline Header_Description_Link& operator=(const Header_Description_Link& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Description_Link& default_instance();
  void Swap(Header_Description_Link* other);
  
  // implements Message ----------------------------------------------
  
  Header_Description_Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_Description_Link& from);
  void MergeFrom(const Header_Description_Link& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* description_;
  static const ::std::string _default_description_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header_Description_Link* default_instance_;
};
// -------------------------------------------------------------------

class Header_Description_Author : public ::google::protobuf::Message {
 public:
  Header_Description_Author();
  virtual ~Header_Description_Author();
  
  Header_Description_Author(const Header_Description_Author& from);
  
  inline Header_Description_Author& operator=(const Header_Description_Author& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Description_Author& default_instance();
  void Swap(Header_Description_Author* other);
  
  // implements Message ----------------------------------------------
  
  Header_Description_Author* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_Description_Author& from);
  void MergeFrom(const Header_Description_Author& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated .decs.Header.Description.Link links = 2;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >& links() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >* mutable_links();
  inline const ::decs::Header_Description_Link& links(int index) const;
  inline ::decs::Header_Description_Link* mutable_links(int index);
  inline ::decs::Header_Description_Link* add_links();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link > links_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header_Description_Author* default_instance_;
};
// -------------------------------------------------------------------

class Header_Description : public ::google::protobuf::Message {
 public:
  Header_Description();
  virtual ~Header_Description();
  
  Header_Description(const Header_Description& from);
  
  inline Header_Description& operator=(const Header_Description& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Description& default_instance();
  void Swap(Header_Description* other);
  
  // implements Message ----------------------------------------------
  
  Header_Description* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_Description& from);
  void MergeFrom(const Header_Description& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef Header_Description_Link Link;
  typedef Header_Description_Author Author;
  
  // accessors -------------------------------------------------------
  
  // optional string description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  
  // repeated .decs.Header.Description.Link links = 2;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >& links() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >* mutable_links();
  inline const ::decs::Header_Description_Link& links(int index) const;
  inline ::decs::Header_Description_Link* mutable_links(int index);
  inline ::decs::Header_Description_Link* add_links();
  
  // repeated .decs.Header.Description.Author authors = 3;
  inline int authors_size() const;
  inline void clear_authors();
  static const int kAuthorsFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Author >& authors() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Author >* mutable_authors();
  inline const ::decs::Header_Description_Author& authors(int index) const;
  inline ::decs::Header_Description_Author* mutable_authors(int index);
  inline ::decs::Header_Description_Author* add_authors();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* description_;
  static const ::std::string _default_description_;
  ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link > links_;
  ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Author > authors_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header_Description* default_instance_;
};
// -------------------------------------------------------------------

class Header_ElementList : public ::google::protobuf::Message {
 public:
  Header_ElementList();
  virtual ~Header_ElementList();
  
  Header_ElementList(const Header_ElementList& from);
  
  inline Header_ElementList& operator=(const Header_ElementList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_ElementList& default_instance();
  void Swap(Header_ElementList* other);
  
  // implements Message ----------------------------------------------
  
  Header_ElementList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_ElementList& from);
  void MergeFrom(const Header_ElementList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 elements = 1;
  inline int elements_size() const;
  inline void clear_elements();
  static const int kElementsFieldNumber = 1;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& elements() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_elements();
  inline ::google::protobuf::uint32 elements(int index) const;
  inline void set_elements(int index, ::google::protobuf::uint32 value);
  inline void add_elements(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > elements_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header_ElementList* default_instance_;
};
// -------------------------------------------------------------------

class Header_Problem : public ::google::protobuf::Message {
 public:
  Header_Problem();
  virtual ~Header_Problem();
  
  Header_Problem(const Header_Problem& from);
  
  inline Header_Problem& operator=(const Header_Problem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Problem& default_instance();
  void Swap(Header_Problem* other);
  
  // implements Message ----------------------------------------------
  
  Header_Problem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_Problem& from);
  void MergeFrom(const Header_Problem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef Header_Problem_ResultStrategy ResultStrategy;
  static const ResultStrategy COUNT = Header_Problem_ResultStrategy_COUNT;
  static const ResultStrategy FULL = Header_Problem_ResultStrategy_FULL;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultStrategy_descriptor() {
    return Header_Problem_ResultStrategy_descriptor();
  }
  static inline bool ResultStrategy_IsValid(int value) {
    return Header_Problem_ResultStrategy_IsValid(value);
  }
  static inline const ::std::string& ResultStrategy_Name(ResultStrategy value) {
    return Header_Problem_ResultStrategy_Name(value);
  }
  static inline bool ResultStrategy_Parse(const ::std::string& name,
      ResultStrategy* value) {
    return Header_Problem_ResultStrategy_Parse(name, value);
  }
  static const ResultStrategy ResultStrategy_MIN =
    Header_Problem_ResultStrategy_ResultStrategy_MIN;
  static const ResultStrategy ResultStrategy_MAX =
    Header_Problem_ResultStrategy_ResultStrategy_MAX;
  
  // accessors -------------------------------------------------------
  
  // optional .decs.Header.Description description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::decs::Header_Description& description() const;
  inline ::decs::Header_Description* mutable_description();
  
  // optional uint32 problem_id = 2;
  inline bool has_problem_id() const;
  inline void clear_problem_id();
  static const int kProblemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 problem_id() const;
  inline void set_problem_id(::google::protobuf::uint32 value);
  
  // optional uint32 sub_problem_id = 3;
  inline bool has_sub_problem_id() const;
  inline void clear_sub_problem_id();
  static const int kSubProblemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sub_problem_id() const;
  inline void set_sub_problem_id(::google::protobuf::uint32 value);
  
  // required uint32 column_count = 4;
  inline bool has_column_count() const;
  inline void clear_column_count();
  static const int kColumnCountFieldNumber = 4;
  inline ::google::protobuf::uint32 column_count() const;
  inline void set_column_count(::google::protobuf::uint32 value);
  
  // required uint32 element_count = 5;
  inline bool has_element_count() const;
  inline void clear_element_count();
  static const int kElementCountFieldNumber = 5;
  inline ::google::protobuf::uint32 element_count() const;
  inline void set_element_count(::google::protobuf::uint32 value);
  
  // repeated .decs.Header.ElementList rows = 6;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >& rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >* mutable_rows();
  inline const ::decs::Header_ElementList& rows(int index) const;
  inline ::decs::Header_ElementList* mutable_rows(int index);
  inline ::decs::Header_ElementList* add_rows();
  
  // repeated uint32 secondary_columns = 7;
  inline int secondary_columns_size() const;
  inline void clear_secondary_columns();
  static const int kSecondaryColumnsFieldNumber = 7;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& secondary_columns() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_secondary_columns();
  inline ::google::protobuf::uint32 secondary_columns(int index) const;
  inline void set_secondary_columns(int index, ::google::protobuf::uint32 value);
  inline void add_secondary_columns(::google::protobuf::uint32 value);
  
  // repeated uint32 init_vector = 8;
  inline int init_vector_size() const;
  inline void clear_init_vector();
  static const int kInitVectorFieldNumber = 8;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& init_vector() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_init_vector();
  inline ::google::protobuf::uint32 init_vector(int index) const;
  inline void set_init_vector(int index, ::google::protobuf::uint32 value);
  inline void add_init_vector(::google::protobuf::uint32 value);
  
  // optional .decs.Header.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
  inline bool has_result_strategy() const;
  inline void clear_result_strategy();
  static const int kResultStrategyFieldNumber = 9;
  inline ::decs::Header_Problem_ResultStrategy result_strategy() const;
  inline void set_result_strategy(::decs::Header_Problem_ResultStrategy value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::decs::Header_Description* description_;
  ::google::protobuf::uint32 problem_id_;
  ::google::protobuf::uint32 sub_problem_id_;
  ::google::protobuf::uint32 column_count_;
  ::google::protobuf::uint32 element_count_;
  ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList > rows_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > secondary_columns_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > init_vector_;
  int result_strategy_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header_Problem* default_instance_;
};
// -------------------------------------------------------------------

class Header_Result : public ::google::protobuf::Message {
 public:
  Header_Result();
  virtual ~Header_Result();
  
  Header_Result(const Header_Result& from);
  
  inline Header_Result& operator=(const Header_Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Result& default_instance();
  void Swap(Header_Result* other);
  
  // implements Message ----------------------------------------------
  
  Header_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header_Result& from);
  void MergeFrom(const Header_Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef Header_Result_ResultState ResultState;
  static const ResultState COMPLETE = Header_Result_ResultState_COMPLETE;
  static const ResultState PARTIAL = Header_Result_ResultState_PARTIAL;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultState_descriptor() {
    return Header_Result_ResultState_descriptor();
  }
  static inline bool ResultState_IsValid(int value) {
    return Header_Result_ResultState_IsValid(value);
  }
  static inline const ::std::string& ResultState_Name(ResultState value) {
    return Header_Result_ResultState_Name(value);
  }
  static inline bool ResultState_Parse(const ::std::string& name,
      ResultState* value) {
    return Header_Result_ResultState_Parse(name, value);
  }
  static const ResultState ResultState_MIN =
    Header_Result_ResultState_ResultState_MIN;
  static const ResultState ResultState_MAX =
    Header_Result_ResultState_ResultState_MAX;
  
  // accessors -------------------------------------------------------
  
  // optional .decs.Header.Description description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::decs::Header_Description& description() const;
  inline ::decs::Header_Description* mutable_description();
  
  // optional uint32 problem_id = 2;
  inline bool has_problem_id() const;
  inline void clear_problem_id();
  static const int kProblemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 problem_id() const;
  inline void set_problem_id(::google::protobuf::uint32 value);
  
  // optional uint32 sub_problem_id = 3;
  inline bool has_sub_problem_id() const;
  inline void clear_sub_problem_id();
  static const int kSubProblemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sub_problem_id() const;
  inline void set_sub_problem_id(::google::protobuf::uint32 value);
  
  // required uint64 solution_count = 4;
  inline bool has_solution_count() const;
  inline void clear_solution_count();
  static const int kSolutionCountFieldNumber = 4;
  inline ::google::protobuf::uint64 solution_count() const;
  inline void set_solution_count(::google::protobuf::uint64 value);
  
  // repeated .decs.Header.ElementList solutions = 5;
  inline int solutions_size() const;
  inline void clear_solutions();
  static const int kSolutionsFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >& solutions() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >* mutable_solutions();
  inline const ::decs::Header_ElementList& solutions(int index) const;
  inline ::decs::Header_ElementList* mutable_solutions(int index);
  inline ::decs::Header_ElementList* add_solutions();
  
  // optional .decs.Header.Result.ResultState state = 6 [default = COMPLETE];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::decs::Header_Result_ResultState state() const;
  inline void set_state(::decs::Header_Result_ResultState value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::decs::Header_Description* description_;
  ::google::protobuf::uint32 problem_id_;
  ::google::protobuf::uint32 sub_problem_id_;
  ::google::protobuf::uint64 solution_count_;
  ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList > solutions_;
  int state_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header_Result* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();
  
  Header(const Header& from);
  
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();
  void Swap(Header* other);
  
  // implements Message ----------------------------------------------
  
  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef Header_Description Description;
  typedef Header_ElementList ElementList;
  typedef Header_Problem Problem;
  typedef Header_Result Result;
  
  // accessors -------------------------------------------------------
  
  // optional .decs.Header.Description description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::decs::Header_Description& description() const;
  inline ::decs::Header_Description* mutable_description();
  
  // repeated .decs.Header.Problem problems = 2;
  inline int problems_size() const;
  inline void clear_problems();
  static const int kProblemsFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Problem >& problems() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Problem >* mutable_problems();
  inline const ::decs::Header_Problem& problems(int index) const;
  inline ::decs::Header_Problem* mutable_problems(int index);
  inline ::decs::Header_Problem* add_problems();
  
  // repeated .decs.Header.Result results = 3;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Result >& results() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Result >* mutable_results();
  inline const ::decs::Header_Result& results(int index) const;
  inline ::decs::Header_Result* mutable_results(int index);
  inline ::decs::Header_Result* add_results();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::decs::Header_Description* description_;
  ::google::protobuf::RepeatedPtrField< ::decs::Header_Problem > problems_;
  ::google::protobuf::RepeatedPtrField< ::decs::Header_Result > results_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Header_Description_Link

// required string url = 1;
inline bool Header_Description_Link::has_url() const {
  return _has_bit(0);
}
inline void Header_Description_Link::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Header_Description_Link::url() const {
  return *url_;
}
inline void Header_Description_Link::set_url(const ::std::string& value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Header_Description_Link::set_url(const char* value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Header_Description_Link::set_url(const char* value, size_t size) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header_Description_Link::mutable_url() {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string description = 2;
inline bool Header_Description_Link::has_description() const {
  return _has_bit(1);
}
inline void Header_Description_Link::clear_description() {
  if (description_ != &_default_description_) {
    description_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Header_Description_Link::description() const {
  return *description_;
}
inline void Header_Description_Link::set_description(const ::std::string& value) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Header_Description_Link::set_description(const char* value) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Header_Description_Link::set_description(const char* value, size_t size) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header_Description_Link::mutable_description() {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  return description_;
}

// -------------------------------------------------------------------

// Header_Description_Author

// required string name = 1;
inline bool Header_Description_Author::has_name() const {
  return _has_bit(0);
}
inline void Header_Description_Author::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Header_Description_Author::name() const {
  return *name_;
}
inline void Header_Description_Author::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Header_Description_Author::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Header_Description_Author::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header_Description_Author::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated .decs.Header.Description.Link links = 2;
inline int Header_Description_Author::links_size() const {
  return links_.size();
}
inline void Header_Description_Author::clear_links() {
  links_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >&
Header_Description_Author::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >*
Header_Description_Author::mutable_links() {
  return &links_;
}
inline const ::decs::Header_Description_Link& Header_Description_Author::links(int index) const {
  return links_.Get(index);
}
inline ::decs::Header_Description_Link* Header_Description_Author::mutable_links(int index) {
  return links_.Mutable(index);
}
inline ::decs::Header_Description_Link* Header_Description_Author::add_links() {
  return links_.Add();
}

// -------------------------------------------------------------------

// Header_Description

// optional string description = 1;
inline bool Header_Description::has_description() const {
  return _has_bit(0);
}
inline void Header_Description::clear_description() {
  if (description_ != &_default_description_) {
    description_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Header_Description::description() const {
  return *description_;
}
inline void Header_Description::set_description(const ::std::string& value) {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Header_Description::set_description(const char* value) {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Header_Description::set_description(const char* value, size_t size) {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header_Description::mutable_description() {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  return description_;
}

// repeated .decs.Header.Description.Link links = 2;
inline int Header_Description::links_size() const {
  return links_.size();
}
inline void Header_Description::clear_links() {
  links_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >&
Header_Description::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Link >*
Header_Description::mutable_links() {
  return &links_;
}
inline const ::decs::Header_Description_Link& Header_Description::links(int index) const {
  return links_.Get(index);
}
inline ::decs::Header_Description_Link* Header_Description::mutable_links(int index) {
  return links_.Mutable(index);
}
inline ::decs::Header_Description_Link* Header_Description::add_links() {
  return links_.Add();
}

// repeated .decs.Header.Description.Author authors = 3;
inline int Header_Description::authors_size() const {
  return authors_.size();
}
inline void Header_Description::clear_authors() {
  authors_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Author >&
Header_Description::authors() const {
  return authors_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Description_Author >*
Header_Description::mutable_authors() {
  return &authors_;
}
inline const ::decs::Header_Description_Author& Header_Description::authors(int index) const {
  return authors_.Get(index);
}
inline ::decs::Header_Description_Author* Header_Description::mutable_authors(int index) {
  return authors_.Mutable(index);
}
inline ::decs::Header_Description_Author* Header_Description::add_authors() {
  return authors_.Add();
}

// -------------------------------------------------------------------

// Header_ElementList

// repeated uint32 elements = 1;
inline int Header_ElementList::elements_size() const {
  return elements_.size();
}
inline void Header_ElementList::clear_elements() {
  elements_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Header_ElementList::elements() const {
  return elements_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Header_ElementList::mutable_elements() {
  return &elements_;
}
inline ::google::protobuf::uint32 Header_ElementList::elements(int index) const {
  return elements_.Get(index);
}
inline void Header_ElementList::set_elements(int index, ::google::protobuf::uint32 value) {
  elements_.Set(index, value);
}
inline void Header_ElementList::add_elements(::google::protobuf::uint32 value) {
  elements_.Add(value);
}

// -------------------------------------------------------------------

// Header_Problem

// optional .decs.Header.Description description = 1;
inline bool Header_Problem::has_description() const {
  return _has_bit(0);
}
inline void Header_Problem::clear_description() {
  if (description_ != NULL) description_->::decs::Header_Description::Clear();
  _clear_bit(0);
}
inline const ::decs::Header_Description& Header_Problem::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::decs::Header_Description* Header_Problem::mutable_description() {
  _set_bit(0);
  if (description_ == NULL) description_ = new ::decs::Header_Description;
  return description_;
}

// optional uint32 problem_id = 2;
inline bool Header_Problem::has_problem_id() const {
  return _has_bit(1);
}
inline void Header_Problem::clear_problem_id() {
  problem_id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Header_Problem::problem_id() const {
  return problem_id_;
}
inline void Header_Problem::set_problem_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  problem_id_ = value;
}

// optional uint32 sub_problem_id = 3;
inline bool Header_Problem::has_sub_problem_id() const {
  return _has_bit(2);
}
inline void Header_Problem::clear_sub_problem_id() {
  sub_problem_id_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Header_Problem::sub_problem_id() const {
  return sub_problem_id_;
}
inline void Header_Problem::set_sub_problem_id(::google::protobuf::uint32 value) {
  _set_bit(2);
  sub_problem_id_ = value;
}

// required uint32 column_count = 4;
inline bool Header_Problem::has_column_count() const {
  return _has_bit(3);
}
inline void Header_Problem::clear_column_count() {
  column_count_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Header_Problem::column_count() const {
  return column_count_;
}
inline void Header_Problem::set_column_count(::google::protobuf::uint32 value) {
  _set_bit(3);
  column_count_ = value;
}

// required uint32 element_count = 5;
inline bool Header_Problem::has_element_count() const {
  return _has_bit(4);
}
inline void Header_Problem::clear_element_count() {
  element_count_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Header_Problem::element_count() const {
  return element_count_;
}
inline void Header_Problem::set_element_count(::google::protobuf::uint32 value) {
  _set_bit(4);
  element_count_ = value;
}

// repeated .decs.Header.ElementList rows = 6;
inline int Header_Problem::rows_size() const {
  return rows_.size();
}
inline void Header_Problem::clear_rows() {
  rows_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >&
Header_Problem::rows() const {
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >*
Header_Problem::mutable_rows() {
  return &rows_;
}
inline const ::decs::Header_ElementList& Header_Problem::rows(int index) const {
  return rows_.Get(index);
}
inline ::decs::Header_ElementList* Header_Problem::mutable_rows(int index) {
  return rows_.Mutable(index);
}
inline ::decs::Header_ElementList* Header_Problem::add_rows() {
  return rows_.Add();
}

// repeated uint32 secondary_columns = 7;
inline int Header_Problem::secondary_columns_size() const {
  return secondary_columns_.size();
}
inline void Header_Problem::clear_secondary_columns() {
  secondary_columns_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Header_Problem::secondary_columns() const {
  return secondary_columns_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Header_Problem::mutable_secondary_columns() {
  return &secondary_columns_;
}
inline ::google::protobuf::uint32 Header_Problem::secondary_columns(int index) const {
  return secondary_columns_.Get(index);
}
inline void Header_Problem::set_secondary_columns(int index, ::google::protobuf::uint32 value) {
  secondary_columns_.Set(index, value);
}
inline void Header_Problem::add_secondary_columns(::google::protobuf::uint32 value) {
  secondary_columns_.Add(value);
}

// repeated uint32 init_vector = 8;
inline int Header_Problem::init_vector_size() const {
  return init_vector_.size();
}
inline void Header_Problem::clear_init_vector() {
  init_vector_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Header_Problem::init_vector() const {
  return init_vector_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Header_Problem::mutable_init_vector() {
  return &init_vector_;
}
inline ::google::protobuf::uint32 Header_Problem::init_vector(int index) const {
  return init_vector_.Get(index);
}
inline void Header_Problem::set_init_vector(int index, ::google::protobuf::uint32 value) {
  init_vector_.Set(index, value);
}
inline void Header_Problem::add_init_vector(::google::protobuf::uint32 value) {
  init_vector_.Add(value);
}

// optional .decs.Header.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
inline bool Header_Problem::has_result_strategy() const {
  return _has_bit(8);
}
inline void Header_Problem::clear_result_strategy() {
  result_strategy_ = 0;
  _clear_bit(8);
}
inline ::decs::Header_Problem_ResultStrategy Header_Problem::result_strategy() const {
  return static_cast< ::decs::Header_Problem_ResultStrategy >(result_strategy_);
}
inline void Header_Problem::set_result_strategy(::decs::Header_Problem_ResultStrategy value) {
  GOOGLE_DCHECK(::decs::Header_Problem_ResultStrategy_IsValid(value));
  _set_bit(8);
  result_strategy_ = value;
}

// -------------------------------------------------------------------

// Header_Result

// optional .decs.Header.Description description = 1;
inline bool Header_Result::has_description() const {
  return _has_bit(0);
}
inline void Header_Result::clear_description() {
  if (description_ != NULL) description_->::decs::Header_Description::Clear();
  _clear_bit(0);
}
inline const ::decs::Header_Description& Header_Result::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::decs::Header_Description* Header_Result::mutable_description() {
  _set_bit(0);
  if (description_ == NULL) description_ = new ::decs::Header_Description;
  return description_;
}

// optional uint32 problem_id = 2;
inline bool Header_Result::has_problem_id() const {
  return _has_bit(1);
}
inline void Header_Result::clear_problem_id() {
  problem_id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Header_Result::problem_id() const {
  return problem_id_;
}
inline void Header_Result::set_problem_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  problem_id_ = value;
}

// optional uint32 sub_problem_id = 3;
inline bool Header_Result::has_sub_problem_id() const {
  return _has_bit(2);
}
inline void Header_Result::clear_sub_problem_id() {
  sub_problem_id_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Header_Result::sub_problem_id() const {
  return sub_problem_id_;
}
inline void Header_Result::set_sub_problem_id(::google::protobuf::uint32 value) {
  _set_bit(2);
  sub_problem_id_ = value;
}

// required uint64 solution_count = 4;
inline bool Header_Result::has_solution_count() const {
  return _has_bit(3);
}
inline void Header_Result::clear_solution_count() {
  solution_count_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 Header_Result::solution_count() const {
  return solution_count_;
}
inline void Header_Result::set_solution_count(::google::protobuf::uint64 value) {
  _set_bit(3);
  solution_count_ = value;
}

// repeated .decs.Header.ElementList solutions = 5;
inline int Header_Result::solutions_size() const {
  return solutions_.size();
}
inline void Header_Result::clear_solutions() {
  solutions_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >&
Header_Result::solutions() const {
  return solutions_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::Header_ElementList >*
Header_Result::mutable_solutions() {
  return &solutions_;
}
inline const ::decs::Header_ElementList& Header_Result::solutions(int index) const {
  return solutions_.Get(index);
}
inline ::decs::Header_ElementList* Header_Result::mutable_solutions(int index) {
  return solutions_.Mutable(index);
}
inline ::decs::Header_ElementList* Header_Result::add_solutions() {
  return solutions_.Add();
}

// optional .decs.Header.Result.ResultState state = 6 [default = COMPLETE];
inline bool Header_Result::has_state() const {
  return _has_bit(5);
}
inline void Header_Result::clear_state() {
  state_ = 0;
  _clear_bit(5);
}
inline ::decs::Header_Result_ResultState Header_Result::state() const {
  return static_cast< ::decs::Header_Result_ResultState >(state_);
}
inline void Header_Result::set_state(::decs::Header_Result_ResultState value) {
  GOOGLE_DCHECK(::decs::Header_Result_ResultState_IsValid(value));
  _set_bit(5);
  state_ = value;
}

// -------------------------------------------------------------------

// Header

// optional .decs.Header.Description description = 1;
inline bool Header::has_description() const {
  return _has_bit(0);
}
inline void Header::clear_description() {
  if (description_ != NULL) description_->::decs::Header_Description::Clear();
  _clear_bit(0);
}
inline const ::decs::Header_Description& Header::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::decs::Header_Description* Header::mutable_description() {
  _set_bit(0);
  if (description_ == NULL) description_ = new ::decs::Header_Description;
  return description_;
}

// repeated .decs.Header.Problem problems = 2;
inline int Header::problems_size() const {
  return problems_.size();
}
inline void Header::clear_problems() {
  problems_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Problem >&
Header::problems() const {
  return problems_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Problem >*
Header::mutable_problems() {
  return &problems_;
}
inline const ::decs::Header_Problem& Header::problems(int index) const {
  return problems_.Get(index);
}
inline ::decs::Header_Problem* Header::mutable_problems(int index) {
  return problems_.Mutable(index);
}
inline ::decs::Header_Problem* Header::add_problems() {
  return problems_.Add();
}

// repeated .decs.Header.Result results = 3;
inline int Header::results_size() const {
  return results_.size();
}
inline void Header::clear_results() {
  results_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::Header_Result >&
Header::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::Header_Result >*
Header::mutable_results() {
  return &results_;
}
inline const ::decs::Header_Result& Header::results(int index) const {
  return results_.Get(index);
}
inline ::decs::Header_Result* Header::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::decs::Header_Result* Header::add_results() {
  return results_.Add();
}


}  // namespace decs
#endif  // PROTOBUF_decs_2eproto__INCLUDED
