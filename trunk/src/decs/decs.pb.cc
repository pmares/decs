// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "decs.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace decs {

namespace {

const ::google::protobuf::Descriptor* DataFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFile_Description_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_Description_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFile_Description_Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_Description_Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFile_Description_Author_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_Description_Author_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFile_ElementList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_ElementList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFile_Problem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_Problem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataFile_Problem_ResultStrategy_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DataFile_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_Result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataFile_Result_ResultState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_decs_2eproto() {
  protobuf_AddDesc_decs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decs.proto");
  GOOGLE_CHECK(file != NULL);
  DataFile_descriptor_ = file->message_type(0);
  static const int DataFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, problem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, result_),
  };
  DataFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_descriptor_,
      DataFile::default_instance_,
      DataFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile));
  DataFile_Description_descriptor_ = DataFile_descriptor_->nested_type(0);
  static const int DataFile_Description_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description, author_),
  };
  DataFile_Description_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_Description_descriptor_,
      DataFile_Description::default_instance_,
      DataFile_Description_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile_Description));
  DataFile_Description_Link_descriptor_ = DataFile_Description_descriptor_->nested_type(0);
  static const int DataFile_Description_Link_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Link, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Link, description_),
  };
  DataFile_Description_Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_Description_Link_descriptor_,
      DataFile_Description_Link::default_instance_,
      DataFile_Description_Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile_Description_Link));
  DataFile_Description_Author_descriptor_ = DataFile_Description_descriptor_->nested_type(1);
  static const int DataFile_Description_Author_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Author, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Author, link_),
  };
  DataFile_Description_Author_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_Description_Author_descriptor_,
      DataFile_Description_Author::default_instance_,
      DataFile_Description_Author_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Author, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Description_Author, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile_Description_Author));
  DataFile_ElementList_descriptor_ = DataFile_descriptor_->nested_type(1);
  static const int DataFile_ElementList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_ElementList, element_),
  };
  DataFile_ElementList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_ElementList_descriptor_,
      DataFile_ElementList::default_instance_,
      DataFile_ElementList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_ElementList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_ElementList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile_ElementList));
  DataFile_Problem_descriptor_ = DataFile_descriptor_->nested_type(2);
  static const int DataFile_Problem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, sub_problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, column_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, element_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, secondary_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, init_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, result_strategy_),
  };
  DataFile_Problem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_Problem_descriptor_,
      DataFile_Problem::default_instance_,
      DataFile_Problem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Problem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile_Problem));
  DataFile_Problem_ResultStrategy_descriptor_ = DataFile_Problem_descriptor_->enum_type(0);
  DataFile_Result_descriptor_ = DataFile_descriptor_->nested_type(3);
  static const int DataFile_Result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, sub_problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, solution_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, solution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, state_),
  };
  DataFile_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_Result_descriptor_,
      DataFile_Result::default_instance_,
      DataFile_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile_Result));
  DataFile_Result_ResultState_descriptor_ = DataFile_Result_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decs_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_descriptor_, &DataFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_Description_descriptor_, &DataFile_Description::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_Description_Link_descriptor_, &DataFile_Description_Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_Description_Author_descriptor_, &DataFile_Description_Author::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_ElementList_descriptor_, &DataFile_ElementList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_Problem_descriptor_, &DataFile_Problem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_Result_descriptor_, &DataFile_Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decs_2eproto() {
  delete DataFile::default_instance_;
  delete DataFile_reflection_;
  delete DataFile_Description::default_instance_;
  delete DataFile_Description_reflection_;
  delete DataFile_Description_Link::default_instance_;
  delete DataFile_Description_Link_reflection_;
  delete DataFile_Description_Author::default_instance_;
  delete DataFile_Description_Author_reflection_;
  delete DataFile_ElementList::default_instance_;
  delete DataFile_ElementList_reflection_;
  delete DataFile_Problem::default_instance_;
  delete DataFile_Problem_reflection_;
  delete DataFile_Result::default_instance_;
  delete DataFile_Result_reflection_;
}

void protobuf_AddDesc_decs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndecs.proto\022\004decs\"\223\010\n\010DataFile\022/\n\013descr"
    "iption\030\001 \001(\0132\032.decs.DataFile.Description"
    "\022\'\n\007problem\030\002 \003(\0132\026.decs.DataFile.Proble"
    "m\022%\n\006result\030\003 \003(\0132\025.decs.DataFile.Result"
    "\032\365\001\n\013Description\022\023\n\013description\030\001 \001(\t\022-\n"
    "\004link\030\002 \003(\0132\037.decs.DataFile.Description."
    "Link\0221\n\006author\030\003 \003(\0132!.decs.DataFile.Des"
    "cription.Author\032(\n\004Link\022\013\n\003url\030\001 \002(\t\022\023\n\013"
    "description\030\002 \001(\t\032E\n\006Author\022\014\n\004name\030\001 \002("
    "\t\022-\n\004link\030\002 \003(\0132\037.decs.DataFile.Descript"
    "ion.Link\032\036\n\013ElementList\022\017\n\007element\030\001 \003(\r"
    "\032\331\002\n\007Problem\022/\n\013description\030\001 \001(\0132\032.decs"
    ".DataFile.Description\022\022\n\nproblem_id\030\002 \001("
    "\r\022\026\n\016sub_problem_id\030\003 \001(\r\022\024\n\014column_coun"
    "t\030\004 \002(\r\022\025\n\relement_count\030\005 \002(\r\022\'\n\003row\030\006 "
    "\003(\0132\032.decs.DataFile.ElementList\022\030\n\020secon"
    "dary_column\030\007 \003(\r\022\023\n\013init_vector\030\010 \003(\r\022E"
    "\n\017result_strategy\030\t \001(\0162%.decs.DataFile."
    "Problem.ResultStrategy:\005COUNT\"%\n\016ResultS"
    "trategy\022\t\n\005COUNT\020\000\022\010\n\004FULL\020\001\032\221\002\n\006Result\022"
    "/\n\013description\030\001 \001(\0132\032.decs.DataFile.Des"
    "cription\022\022\n\nproblem_id\030\002 \001(\r\022\026\n\016sub_prob"
    "lem_id\030\003 \001(\r\022\026\n\016solution_count\030\004 \002(\004\022,\n\010"
    "solution\030\005 \003(\0132\032.decs.DataFile.ElementLi"
    "st\022:\n\005state\030\006 \001(\0162!.decs.DataFile.Result"
    ".ResultState:\010COMPLETE\"(\n\013ResultState\022\014\n"
    "\010COMPLETE\020\000\022\013\n\007PARTIAL\020\001", 1064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decs.proto", &protobuf_RegisterTypes);
  DataFile::default_instance_ = new DataFile();
  DataFile_Description::default_instance_ = new DataFile_Description();
  DataFile_Description_Link::default_instance_ = new DataFile_Description_Link();
  DataFile_Description_Author::default_instance_ = new DataFile_Description_Author();
  DataFile_ElementList::default_instance_ = new DataFile_ElementList();
  DataFile_Problem::default_instance_ = new DataFile_Problem();
  DataFile_Result::default_instance_ = new DataFile_Result();
  DataFile::default_instance_->InitAsDefaultInstance();
  DataFile_Description::default_instance_->InitAsDefaultInstance();
  DataFile_Description_Link::default_instance_->InitAsDefaultInstance();
  DataFile_Description_Author::default_instance_->InitAsDefaultInstance();
  DataFile_ElementList::default_instance_->InitAsDefaultInstance();
  DataFile_Problem::default_instance_->InitAsDefaultInstance();
  DataFile_Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decs_2eproto {
  StaticDescriptorInitializer_decs_2eproto() {
    protobuf_AddDesc_decs_2eproto();
  }
} static_descriptor_initializer_decs_2eproto_;


// ===================================================================

const ::std::string DataFile_Description_Link::_default_url_;
const ::std::string DataFile_Description_Link::_default_description_;
#ifndef _MSC_VER
const int DataFile_Description_Link::kUrlFieldNumber;
const int DataFile_Description_Link::kDescriptionFieldNumber;
#endif  // !_MSC_VER

DataFile_Description_Link::DataFile_Description_Link()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile_Description_Link::InitAsDefaultInstance() {}

DataFile_Description_Link::DataFile_Description_Link(const DataFile_Description_Link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile_Description_Link::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&_default_url_);
  description_ = const_cast< ::std::string*>(&_default_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile_Description_Link::~DataFile_Description_Link() {
  SharedDtor();
}

void DataFile_Description_Link::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DataFile_Description_Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Description_Link_descriptor_;
}

const DataFile_Description_Link& DataFile_Description_Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

DataFile_Description_Link* DataFile_Description_Link::default_instance_ = NULL;

DataFile_Description_Link* DataFile_Description_Link::New() const {
  return new DataFile_Description_Link;
}

void DataFile_Description_Link::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(1)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile_Description_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_url()));
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_description:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_description()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile_Description_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DataFile_Description_Link::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->url(), output);
  }
  
  // optional string description = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile_Description_Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->url(), target);
  }
  
  // optional string description = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile_Description_Link::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->url());
    }
    
    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DataFile_Description_Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile_Description_Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile_Description_Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile_Description_Link::MergeFrom(const DataFile_Description_Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_url(from.url());
    }
    if (from._has_bit(1)) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile_Description_Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Description_Link::CopyFrom(const DataFile_Description_Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Description_Link::Swap(DataFile_Description_Link* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DataFile_Description_Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* DataFile_Description_Link::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DataFile_Description_Link::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Description_Link_reflection_;
}

// -------------------------------------------------------------------

const ::std::string DataFile_Description_Author::_default_name_;
#ifndef _MSC_VER
const int DataFile_Description_Author::kNameFieldNumber;
const int DataFile_Description_Author::kLinkFieldNumber;
#endif  // !_MSC_VER

DataFile_Description_Author::DataFile_Description_Author()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile_Description_Author::InitAsDefaultInstance() {}

DataFile_Description_Author::DataFile_Description_Author(const DataFile_Description_Author& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile_Description_Author::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile_Description_Author::~DataFile_Description_Author() {
  SharedDtor();
}

void DataFile_Description_Author::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DataFile_Description_Author::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Description_Author_descriptor_;
}

const DataFile_Description_Author& DataFile_Description_Author::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

DataFile_Description_Author* DataFile_Description_Author::default_instance_ = NULL;

DataFile_Description_Author* DataFile_Description_Author::New() const {
  return new DataFile_Description_Author;
}

void DataFile_Description_Author::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  link_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile_Description_Author::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_link;
        break;
      }
      
      // repeated .decs.DataFile.Description.Link link = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_link:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_link()));
        if (input->ExpectTag(18)) goto parse_link;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile_Description_Author::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DataFile_Description_Author::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output);
  }
  
  // repeated .decs.DataFile.Description.Link link = 2;
  for (int i = 0; i < this->link_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->link(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile_Description_Author::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->name(), target);
  }
  
  // repeated .decs.DataFile.Description.Link link = 2;
  for (int i = 0; i < this->link_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->link(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile_Description_Author::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  // repeated .decs.DataFile.Description.Link link = 2;
  total_size += 1 * this->link_size();
  for (int i = 0; i < this->link_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->link(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DataFile_Description_Author::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile_Description_Author* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile_Description_Author*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile_Description_Author::MergeFrom(const DataFile_Description_Author& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_.MergeFrom(from.link_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile_Description_Author::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Description_Author::CopyFrom(const DataFile_Description_Author& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Description_Author::Swap(DataFile_Description_Author* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    link_.Swap(&other->link_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DataFile_Description_Author::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < link_size(); i++) {
    if (!this->link(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* DataFile_Description_Author::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DataFile_Description_Author::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Description_Author_reflection_;
}

// -------------------------------------------------------------------

const ::std::string DataFile_Description::_default_description_;
#ifndef _MSC_VER
const int DataFile_Description::kDescriptionFieldNumber;
const int DataFile_Description::kLinkFieldNumber;
const int DataFile_Description::kAuthorFieldNumber;
#endif  // !_MSC_VER

DataFile_Description::DataFile_Description()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile_Description::InitAsDefaultInstance() {}

DataFile_Description::DataFile_Description(const DataFile_Description& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile_Description::SharedCtor() {
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&_default_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile_Description::~DataFile_Description() {
  SharedDtor();
}

void DataFile_Description::SharedDtor() {
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DataFile_Description::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Description_descriptor_;
}

const DataFile_Description& DataFile_Description::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

DataFile_Description* DataFile_Description::default_instance_ = NULL;

DataFile_Description* DataFile_Description::New() const {
  return new DataFile_Description;
}

void DataFile_Description::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
  }
  link_.Clear();
  author_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile_Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_description()));
        if (input->ExpectTag(18)) goto parse_link;
        break;
      }
      
      // repeated .decs.DataFile.Description.Link link = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_link:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_link()));
        if (input->ExpectTag(18)) goto parse_link;
        if (input->ExpectTag(26)) goto parse_author;
        break;
      }
      
      // repeated .decs.DataFile.Description.Author author = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_author:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_author()));
        if (input->ExpectTag(26)) goto parse_author;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile_Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DataFile_Description::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->description(), output);
  }
  
  // repeated .decs.DataFile.Description.Link link = 2;
  for (int i = 0; i < this->link_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->link(i), output);
  }
  
  // repeated .decs.DataFile.Description.Author author = 3;
  for (int i = 0; i < this->author_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->author(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile_Description::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->description(), target);
  }
  
  // repeated .decs.DataFile.Description.Link link = 2;
  for (int i = 0; i < this->link_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->link(i), target);
  }
  
  // repeated .decs.DataFile.Description.Author author = 3;
  for (int i = 0; i < this->author_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->author(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile_Description::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->description());
    }
    
  }
  // repeated .decs.DataFile.Description.Link link = 2;
  total_size += 1 * this->link_size();
  for (int i = 0; i < this->link_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->link(i));
  }
  
  // repeated .decs.DataFile.Description.Author author = 3;
  total_size += 1 * this->author_size();
  for (int i = 0; i < this->author_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->author(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DataFile_Description::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile_Description* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile_Description*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile_Description::MergeFrom(const DataFile_Description& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_.MergeFrom(from.link_);
  author_.MergeFrom(from.author_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile_Description::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Description::CopyFrom(const DataFile_Description& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Description::Swap(DataFile_Description* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    link_.Swap(&other->link_);
    author_.Swap(&other->author_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DataFile_Description::IsInitialized() const {
  
  for (int i = 0; i < link_size(); i++) {
    if (!this->link(i).IsInitialized()) return false;
  }
  for (int i = 0; i < author_size(); i++) {
    if (!this->author(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* DataFile_Description::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DataFile_Description::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Description_reflection_;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataFile_ElementList::kElementFieldNumber;
#endif  // !_MSC_VER

DataFile_ElementList::DataFile_ElementList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile_ElementList::InitAsDefaultInstance() {}

DataFile_ElementList::DataFile_ElementList(const DataFile_ElementList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile_ElementList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile_ElementList::~DataFile_ElementList() {
  SharedDtor();
}

void DataFile_ElementList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DataFile_ElementList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_ElementList_descriptor_;
}

const DataFile_ElementList& DataFile_ElementList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

DataFile_ElementList* DataFile_ElementList::default_instance_ = NULL;

DataFile_ElementList* DataFile_ElementList::New() const {
  return new DataFile_ElementList;
}

void DataFile_ElementList::Clear() {
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile_ElementList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 element = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_element:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_element(value);
        if (input->ExpectTag(8)) goto parse_element;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile_ElementList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DataFile_ElementList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->element(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile_ElementList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 element = 1;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->element(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile_ElementList::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 element = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->element(i));
    }
    total_size += 1 * this->element_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DataFile_ElementList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile_ElementList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile_ElementList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile_ElementList::MergeFrom(const DataFile_ElementList& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile_ElementList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_ElementList::CopyFrom(const DataFile_ElementList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_ElementList::Swap(DataFile_ElementList* other) {
  if (other != this) {
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DataFile_ElementList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* DataFile_ElementList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DataFile_ElementList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DataFile_ElementList_reflection_;
}

// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* DataFile_Problem_ResultStrategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Problem_ResultStrategy_descriptor_;
}
bool DataFile_Problem_ResultStrategy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataFile_Problem_ResultStrategy DataFile_Problem::COUNT;
const DataFile_Problem_ResultStrategy DataFile_Problem::FULL;
const DataFile_Problem_ResultStrategy DataFile_Problem::ResultStrategy_MIN;
const DataFile_Problem_ResultStrategy DataFile_Problem::ResultStrategy_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataFile_Problem::kDescriptionFieldNumber;
const int DataFile_Problem::kProblemIdFieldNumber;
const int DataFile_Problem::kSubProblemIdFieldNumber;
const int DataFile_Problem::kColumnCountFieldNumber;
const int DataFile_Problem::kElementCountFieldNumber;
const int DataFile_Problem::kRowFieldNumber;
const int DataFile_Problem::kSecondaryColumnFieldNumber;
const int DataFile_Problem::kInitVectorFieldNumber;
const int DataFile_Problem::kResultStrategyFieldNumber;
#endif  // !_MSC_VER

DataFile_Problem::DataFile_Problem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile_Problem::InitAsDefaultInstance() {  description_ = const_cast< ::decs::DataFile_Description*>(&::decs::DataFile_Description::default_instance());
}

DataFile_Problem::DataFile_Problem(const DataFile_Problem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile_Problem::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  problem_id_ = 0u;
  sub_problem_id_ = 0u;
  column_count_ = 0u;
  element_count_ = 0u;
  result_strategy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile_Problem::~DataFile_Problem() {
  SharedDtor();
}

void DataFile_Problem::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

const ::google::protobuf::Descriptor* DataFile_Problem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Problem_descriptor_;
}

const DataFile_Problem& DataFile_Problem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

DataFile_Problem* DataFile_Problem::default_instance_ = NULL;

DataFile_Problem* DataFile_Problem::New() const {
  return new DataFile_Problem;
}

void DataFile_Problem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != NULL) description_->::decs::DataFile_Description::Clear();
    }
    problem_id_ = 0u;
    sub_problem_id_ = 0u;
    column_count_ = 0u;
    element_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    result_strategy_ = 0;
  }
  row_.Clear();
  secondary_column_.Clear();
  init_vector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile_Problem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .decs.DataFile.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_description()));
        if (input->ExpectTag(16)) goto parse_problem_id;
        break;
      }
      
      // optional uint32 problem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &problem_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_sub_problem_id;
        break;
      }
      
      // optional uint32 sub_problem_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sub_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sub_problem_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_column_count;
        break;
      }
      
      // required uint32 column_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_column_count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &column_count_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_element_count;
        break;
      }
      
      // required uint32 element_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_element_count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &element_count_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_row;
        break;
      }
      
      // repeated .decs.DataFile.ElementList row = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_row:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_row()));
        if (input->ExpectTag(50)) goto parse_row;
        if (input->ExpectTag(56)) goto parse_secondary_column;
        break;
      }
      
      // repeated uint32 secondary_column = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_secondary_column:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_secondary_column(value);
        if (input->ExpectTag(56)) goto parse_secondary_column;
        if (input->ExpectTag(64)) goto parse_init_vector;
        break;
      }
      
      // repeated uint32 init_vector = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_init_vector:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_init_vector(value);
        if (input->ExpectTag(64)) goto parse_init_vector;
        if (input->ExpectTag(72)) goto parse_result_strategy;
        break;
      }
      
      // optional .decs.DataFile.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_result_strategy:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::decs::DataFile_Problem_ResultStrategy_IsValid(value)) {
          set_result_strategy(static_cast< ::decs::DataFile_Problem_ResultStrategy >(value));
        } else {
          mutable_unknown_fields()->AddVarint(9, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile_Problem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DataFile_Problem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .decs.DataFile.Description description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->description(), output);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->problem_id(), output);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sub_problem_id(), output);
  }
  
  // required uint32 column_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->column_count(), output);
  }
  
  // required uint32 element_count = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->element_count(), output);
  }
  
  // repeated .decs.DataFile.ElementList row = 6;
  for (int i = 0; i < this->row_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->row(i), output);
  }
  
  // repeated uint32 secondary_column = 7;
  for (int i = 0; i < this->secondary_column_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->secondary_column(i), output);
  }
  
  // repeated uint32 init_vector = 8;
  for (int i = 0; i < this->init_vector_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->init_vector(i), output);
  }
  
  // optional .decs.DataFile.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(9, this->result_strategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile_Problem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .decs.DataFile.Description description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->description(), target);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->problem_id(), target);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sub_problem_id(), target);
  }
  
  // required uint32 column_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->column_count(), target);
  }
  
  // required uint32 element_count = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->element_count(), target);
  }
  
  // repeated .decs.DataFile.ElementList row = 6;
  for (int i = 0; i < this->row_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->row(i), target);
  }
  
  // repeated uint32 secondary_column = 7;
  for (int i = 0; i < this->secondary_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->secondary_column(i), target);
  }
  
  // repeated uint32 init_vector = 8;
  for (int i = 0; i < this->init_vector_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->init_vector(i), target);
  }
  
  // optional .decs.DataFile.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(9, this->result_strategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile_Problem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .decs.DataFile.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->description());
    }
    
    // optional uint32 problem_id = 2;
    if (has_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->problem_id());
    }
    
    // optional uint32 sub_problem_id = 3;
    if (has_sub_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sub_problem_id());
    }
    
    // required uint32 column_count = 4;
    if (has_column_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->column_count());
    }
    
    // required uint32 element_count = 5;
    if (has_element_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->element_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .decs.DataFile.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
    if (has_result_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->result_strategy());
    }
    
  }
  // repeated .decs.DataFile.ElementList row = 6;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->row(i));
  }
  
  // repeated uint32 secondary_column = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->secondary_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->secondary_column(i));
    }
    total_size += 1 * this->secondary_column_size() + data_size;
  }
  
  // repeated uint32 init_vector = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->init_vector_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->init_vector(i));
    }
    total_size += 1 * this->init_vector_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DataFile_Problem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile_Problem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile_Problem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile_Problem::MergeFrom(const DataFile_Problem& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_.MergeFrom(from.row_);
  secondary_column_.MergeFrom(from.secondary_column_);
  init_vector_.MergeFrom(from.init_vector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_description()->::decs::DataFile_Description::MergeFrom(from.description());
    }
    if (from._has_bit(1)) {
      set_problem_id(from.problem_id());
    }
    if (from._has_bit(2)) {
      set_sub_problem_id(from.sub_problem_id());
    }
    if (from._has_bit(3)) {
      set_column_count(from.column_count());
    }
    if (from._has_bit(4)) {
      set_element_count(from.element_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_result_strategy(from.result_strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile_Problem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Problem::CopyFrom(const DataFile_Problem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Problem::Swap(DataFile_Problem* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(problem_id_, other->problem_id_);
    std::swap(sub_problem_id_, other->sub_problem_id_);
    std::swap(column_count_, other->column_count_);
    std::swap(element_count_, other->element_count_);
    row_.Swap(&other->row_);
    secondary_column_.Swap(&other->secondary_column_);
    init_vector_.Swap(&other->init_vector_);
    std::swap(result_strategy_, other->result_strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DataFile_Problem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* DataFile_Problem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DataFile_Problem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Problem_reflection_;
}

// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* DataFile_Result_ResultState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Result_ResultState_descriptor_;
}
bool DataFile_Result_ResultState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataFile_Result_ResultState DataFile_Result::COMPLETE;
const DataFile_Result_ResultState DataFile_Result::PARTIAL;
const DataFile_Result_ResultState DataFile_Result::ResultState_MIN;
const DataFile_Result_ResultState DataFile_Result::ResultState_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataFile_Result::kDescriptionFieldNumber;
const int DataFile_Result::kProblemIdFieldNumber;
const int DataFile_Result::kSubProblemIdFieldNumber;
const int DataFile_Result::kSolutionCountFieldNumber;
const int DataFile_Result::kSolutionFieldNumber;
const int DataFile_Result::kStateFieldNumber;
#endif  // !_MSC_VER

DataFile_Result::DataFile_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile_Result::InitAsDefaultInstance() {  description_ = const_cast< ::decs::DataFile_Description*>(&::decs::DataFile_Description::default_instance());
}

DataFile_Result::DataFile_Result(const DataFile_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile_Result::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  problem_id_ = 0u;
  sub_problem_id_ = 0u;
  solution_count_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile_Result::~DataFile_Result() {
  SharedDtor();
}

void DataFile_Result::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

const ::google::protobuf::Descriptor* DataFile_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Result_descriptor_;
}

const DataFile_Result& DataFile_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

DataFile_Result* DataFile_Result::default_instance_ = NULL;

DataFile_Result* DataFile_Result::New() const {
  return new DataFile_Result;
}

void DataFile_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != NULL) description_->::decs::DataFile_Description::Clear();
    }
    problem_id_ = 0u;
    sub_problem_id_ = 0u;
    solution_count_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  solution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .decs.DataFile.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_description()));
        if (input->ExpectTag(16)) goto parse_problem_id;
        break;
      }
      
      // optional uint32 problem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &problem_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_sub_problem_id;
        break;
      }
      
      // optional uint32 sub_problem_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sub_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sub_problem_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_solution_count;
        break;
      }
      
      // required uint64 solution_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_solution_count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &solution_count_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_solution;
        break;
      }
      
      // repeated .decs.DataFile.ElementList solution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_solution:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_solution()));
        if (input->ExpectTag(42)) goto parse_solution;
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }
      
      // optional .decs.DataFile.Result.ResultState state = 6 [default = COMPLETE];
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::decs::DataFile_Result_ResultState_IsValid(value)) {
          set_state(static_cast< ::decs::DataFile_Result_ResultState >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DataFile_Result::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .decs.DataFile.Description description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->description(), output);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->problem_id(), output);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sub_problem_id(), output);
  }
  
  // required uint64 solution_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->solution_count(), output);
  }
  
  // repeated .decs.DataFile.ElementList solution = 5;
  for (int i = 0; i < this->solution_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->solution(i), output);
  }
  
  // optional .decs.DataFile.Result.ResultState state = 6 [default = COMPLETE];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(6, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .decs.DataFile.Description description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->description(), target);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->problem_id(), target);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sub_problem_id(), target);
  }
  
  // required uint64 solution_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->solution_count(), target);
  }
  
  // repeated .decs.DataFile.ElementList solution = 5;
  for (int i = 0; i < this->solution_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->solution(i), target);
  }
  
  // optional .decs.DataFile.Result.ResultState state = 6 [default = COMPLETE];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(6, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile_Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .decs.DataFile.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->description());
    }
    
    // optional uint32 problem_id = 2;
    if (has_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->problem_id());
    }
    
    // optional uint32 sub_problem_id = 3;
    if (has_sub_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sub_problem_id());
    }
    
    // required uint64 solution_count = 4;
    if (has_solution_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->solution_count());
    }
    
    // optional .decs.DataFile.Result.ResultState state = 6 [default = COMPLETE];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->state());
    }
    
  }
  // repeated .decs.DataFile.ElementList solution = 5;
  total_size += 1 * this->solution_size();
  for (int i = 0; i < this->solution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->solution(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DataFile_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile_Result::MergeFrom(const DataFile_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  solution_.MergeFrom(from.solution_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_description()->::decs::DataFile_Description::MergeFrom(from.description());
    }
    if (from._has_bit(1)) {
      set_problem_id(from.problem_id());
    }
    if (from._has_bit(2)) {
      set_sub_problem_id(from.sub_problem_id());
    }
    if (from._has_bit(3)) {
      set_solution_count(from.solution_count());
    }
    if (from._has_bit(5)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Result::CopyFrom(const DataFile_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile_Result::Swap(DataFile_Result* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(problem_id_, other->problem_id_);
    std::swap(sub_problem_id_, other->sub_problem_id_);
    std::swap(solution_count_, other->solution_count_);
    solution_.Swap(&other->solution_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DataFile_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* DataFile_Result::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DataFile_Result::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DataFile_Result_reflection_;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataFile::kDescriptionFieldNumber;
const int DataFile::kProblemFieldNumber;
const int DataFile::kResultFieldNumber;
#endif  // !_MSC_VER

DataFile::DataFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataFile::InitAsDefaultInstance() {  description_ = const_cast< ::decs::DataFile_Description*>(&::decs::DataFile_Description::default_instance());
}

DataFile::DataFile(const DataFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataFile::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile::~DataFile() {
  SharedDtor();
}

void DataFile::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

const ::google::protobuf::Descriptor* DataFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_descriptor_;
}

const DataFile& DataFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

DataFile* DataFile::default_instance_ = NULL;

DataFile* DataFile::New() const {
  return new DataFile;
}

void DataFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != NULL) description_->::decs::DataFile_Description::Clear();
    }
  }
  problem_.Clear();
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .decs.DataFile.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_description()));
        if (input->ExpectTag(18)) goto parse_problem;
        break;
      }
      
      // repeated .decs.DataFile.Problem problem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_problem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_problem()));
        if (input->ExpectTag(18)) goto parse_problem;
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }
      
      // repeated .decs.DataFile.Result result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_result:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_result()));
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DataFile::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .decs.DataFile.Description description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->description(), output);
  }
  
  // repeated .decs.DataFile.Problem problem = 2;
  for (int i = 0; i < this->problem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->problem(i), output);
  }
  
  // repeated .decs.DataFile.Result result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->result(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .decs.DataFile.Description description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->description(), target);
  }
  
  // repeated .decs.DataFile.Problem problem = 2;
  for (int i = 0; i < this->problem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->problem(i), target);
  }
  
  // repeated .decs.DataFile.Result result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->result(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .decs.DataFile.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->description());
    }
    
  }
  // repeated .decs.DataFile.Problem problem = 2;
  total_size += 1 * this->problem_size();
  for (int i = 0; i < this->problem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->problem(i));
  }
  
  // repeated .decs.DataFile.Result result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DataFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile::MergeFrom(const DataFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  problem_.MergeFrom(from.problem_);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_description()->::decs::DataFile_Description::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile::CopyFrom(const DataFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile::Swap(DataFile* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    problem_.Swap(&other->problem_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DataFile::IsInitialized() const {
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  for (int i = 0; i < problem_size(); i++) {
    if (!this->problem(i).IsInitialized()) return false;
  }
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* DataFile::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DataFile::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DataFile_reflection_;
}

}  // namespace decs
