// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "decs.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace decs {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_Description_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_Description_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_Description_Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_Description_Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_Description_Author_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_Description_Author_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ElementList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ElementList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_Problem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_Problem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_Problem_ResultStrategy_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Header_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_Result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_Result_ResultState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_decs_2eproto() {
  protobuf_AddDesc_decs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decs.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, problems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, results_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Header_Description_descriptor_ = Header_descriptor_->nested_type(0);
  static const int Header_Description_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description, authors_),
  };
  Header_Description_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_Description_descriptor_,
      Header_Description::default_instance_,
      Header_Description_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_Description));
  Header_Description_Link_descriptor_ = Header_Description_descriptor_->nested_type(0);
  static const int Header_Description_Link_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Link, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Link, description_),
  };
  Header_Description_Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_Description_Link_descriptor_,
      Header_Description_Link::default_instance_,
      Header_Description_Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_Description_Link));
  Header_Description_Author_descriptor_ = Header_Description_descriptor_->nested_type(1);
  static const int Header_Description_Author_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Author, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Author, links_),
  };
  Header_Description_Author_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_Description_Author_descriptor_,
      Header_Description_Author::default_instance_,
      Header_Description_Author_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Author, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Description_Author, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_Description_Author));
  Header_ElementList_descriptor_ = Header_descriptor_->nested_type(1);
  static const int Header_ElementList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ElementList, elements_),
  };
  Header_ElementList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ElementList_descriptor_,
      Header_ElementList::default_instance_,
      Header_ElementList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ElementList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ElementList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ElementList));
  Header_Problem_descriptor_ = Header_descriptor_->nested_type(2);
  static const int Header_Problem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, sub_problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, column_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, element_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, secondary_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, init_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, result_strategy_),
  };
  Header_Problem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_Problem_descriptor_,
      Header_Problem::default_instance_,
      Header_Problem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Problem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_Problem));
  Header_Problem_ResultStrategy_descriptor_ = Header_Problem_descriptor_->enum_type(0);
  Header_Result_descriptor_ = Header_descriptor_->nested_type(3);
  static const int Header_Result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, sub_problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, solution_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, solutions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, state_),
  };
  Header_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_Result_descriptor_,
      Header_Result::default_instance_,
      Header_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_Result));
  Header_Result_ResultState_descriptor_ = Header_Result_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decs_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_Description_descriptor_, &Header_Description::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_Description_Link_descriptor_, &Header_Description_Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_Description_Author_descriptor_, &Header_Description_Author::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ElementList_descriptor_, &Header_ElementList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_Problem_descriptor_, &Header_Problem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_Result_descriptor_, &Header_Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decs_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Header_Description::default_instance_;
  delete Header_Description_reflection_;
  delete Header_Description_Link::default_instance_;
  delete Header_Description_Link_reflection_;
  delete Header_Description_Author::default_instance_;
  delete Header_Description_Author_reflection_;
  delete Header_ElementList::default_instance_;
  delete Header_ElementList_reflection_;
  delete Header_Problem::default_instance_;
  delete Header_Problem_reflection_;
  delete Header_Result::default_instance_;
  delete Header_Result_reflection_;
}

void protobuf_AddDesc_decs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndecs.proto\022\004decs\"\202\010\n\006Header\022-\n\013descrip"
    "tion\030\001 \001(\0132\030.decs.Header.Description\022&\n\010"
    "problems\030\002 \003(\0132\024.decs.Header.Problem\022$\n\007"
    "results\030\003 \003(\0132\023.decs.Header.Result\032\362\001\n\013D"
    "escription\022\023\n\013description\030\001 \001(\t\022,\n\005links"
    "\030\002 \003(\0132\035.decs.Header.Description.Link\0220\n"
    "\007authors\030\003 \003(\0132\037.decs.Header.Description"
    ".Author\032(\n\004Link\022\013\n\003url\030\001 \002(\t\022\023\n\013descript"
    "ion\030\002 \001(\t\032D\n\006Author\022\014\n\004name\030\001 \002(\t\022,\n\005lin"
    "ks\030\002 \003(\0132\035.decs.Header.Description.Link\032"
    "\037\n\013ElementList\022\020\n\010elements\030\001 \003(\r\032\325\002\n\007Pro"
    "blem\022-\n\013description\030\001 \001(\0132\030.decs.Header."
    "Description\022\022\n\nproblem_id\030\002 \001(\r\022\026\n\016sub_p"
    "roblem_id\030\003 \001(\r\022\024\n\014column_count\030\004 \002(\r\022\025\n"
    "\relement_count\030\005 \002(\r\022&\n\004rows\030\006 \003(\0132\030.dec"
    "s.Header.ElementList\022\031\n\021secondary_column"
    "s\030\007 \003(\r\022\023\n\013init_vector\030\010 \003(\r\022C\n\017result_s"
    "trategy\030\t \001(\0162#.decs.Header.Problem.Resu"
    "ltStrategy:\005COUNT\"%\n\016ResultStrategy\022\t\n\005C"
    "OUNT\020\000\022\010\n\004FULL\020\001\032\214\002\n\006Result\022-\n\013descripti"
    "on\030\001 \001(\0132\030.decs.Header.Description\022\022\n\npr"
    "oblem_id\030\002 \001(\r\022\026\n\016sub_problem_id\030\003 \001(\r\022\026"
    "\n\016solution_count\030\004 \002(\004\022+\n\tsolutions\030\005 \003("
    "\0132\030.decs.Header.ElementList\0228\n\005state\030\006 \001"
    "(\0162\037.decs.Header.Result.ResultState:\010COM"
    "PLETE\"(\n\013ResultState\022\014\n\010COMPLETE\020\000\022\013\n\007PA"
    "RTIAL\020\001", 1047);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decs.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Header_Description::default_instance_ = new Header_Description();
  Header_Description_Link::default_instance_ = new Header_Description_Link();
  Header_Description_Author::default_instance_ = new Header_Description_Author();
  Header_ElementList::default_instance_ = new Header_ElementList();
  Header_Problem::default_instance_ = new Header_Problem();
  Header_Result::default_instance_ = new Header_Result();
  Header::default_instance_->InitAsDefaultInstance();
  Header_Description::default_instance_->InitAsDefaultInstance();
  Header_Description_Link::default_instance_->InitAsDefaultInstance();
  Header_Description_Author::default_instance_->InitAsDefaultInstance();
  Header_ElementList::default_instance_->InitAsDefaultInstance();
  Header_Problem::default_instance_->InitAsDefaultInstance();
  Header_Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decs_2eproto {
  StaticDescriptorInitializer_decs_2eproto() {
    protobuf_AddDesc_decs_2eproto();
  }
} static_descriptor_initializer_decs_2eproto_;


// ===================================================================

const ::std::string Header_Description_Link::_default_url_;
const ::std::string Header_Description_Link::_default_description_;
#ifndef _MSC_VER
const int Header_Description_Link::kUrlFieldNumber;
const int Header_Description_Link::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Header_Description_Link::Header_Description_Link()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_Description_Link::InitAsDefaultInstance() {}

Header_Description_Link::Header_Description_Link(const Header_Description_Link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_Description_Link::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&_default_url_);
  description_ = const_cast< ::std::string*>(&_default_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_Description_Link::~Header_Description_Link() {
  SharedDtor();
}

void Header_Description_Link::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Header_Description_Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Description_Link_descriptor_;
}

const Header_Description_Link& Header_Description_Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

Header_Description_Link* Header_Description_Link::default_instance_ = NULL;

Header_Description_Link* Header_Description_Link::New() const {
  return new Header_Description_Link;
}

void Header_Description_Link::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(1)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_Description_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_url()));
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_description:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_description()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_Description_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Header_Description_Link::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->url(), output);
  }
  
  // optional string description = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_Description_Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->url(), target);
  }
  
  // optional string description = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_Description_Link::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->url());
    }
    
    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Header_Description_Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_Description_Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_Description_Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_Description_Link::MergeFrom(const Header_Description_Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_url(from.url());
    }
    if (from._has_bit(1)) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_Description_Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Description_Link::CopyFrom(const Header_Description_Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Description_Link::Swap(Header_Description_Link* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Header_Description_Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* Header_Description_Link::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Header_Description_Link::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Header_Description_Link_reflection_;
}

// -------------------------------------------------------------------

const ::std::string Header_Description_Author::_default_name_;
#ifndef _MSC_VER
const int Header_Description_Author::kNameFieldNumber;
const int Header_Description_Author::kLinksFieldNumber;
#endif  // !_MSC_VER

Header_Description_Author::Header_Description_Author()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_Description_Author::InitAsDefaultInstance() {}

Header_Description_Author::Header_Description_Author(const Header_Description_Author& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_Description_Author::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_Description_Author::~Header_Description_Author() {
  SharedDtor();
}

void Header_Description_Author::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Header_Description_Author::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Description_Author_descriptor_;
}

const Header_Description_Author& Header_Description_Author::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

Header_Description_Author* Header_Description_Author::default_instance_ = NULL;

Header_Description_Author* Header_Description_Author::New() const {
  return new Header_Description_Author;
}

void Header_Description_Author::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_Description_Author::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_links;
        break;
      }
      
      // repeated .decs.Header.Description.Link links = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_links:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_links()));
        if (input->ExpectTag(18)) goto parse_links;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_Description_Author::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Header_Description_Author::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output);
  }
  
  // repeated .decs.Header.Description.Link links = 2;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->links(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_Description_Author::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->name(), target);
  }
  
  // repeated .decs.Header.Description.Link links = 2;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->links(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_Description_Author::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  // repeated .decs.Header.Description.Link links = 2;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->links(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Header_Description_Author::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_Description_Author* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_Description_Author*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_Description_Author::MergeFrom(const Header_Description_Author& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_Description_Author::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Description_Author::CopyFrom(const Header_Description_Author& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Description_Author::Swap(Header_Description_Author* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    links_.Swap(&other->links_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Header_Description_Author::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < links_size(); i++) {
    if (!this->links(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Header_Description_Author::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Header_Description_Author::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Header_Description_Author_reflection_;
}

// -------------------------------------------------------------------

const ::std::string Header_Description::_default_description_;
#ifndef _MSC_VER
const int Header_Description::kDescriptionFieldNumber;
const int Header_Description::kLinksFieldNumber;
const int Header_Description::kAuthorsFieldNumber;
#endif  // !_MSC_VER

Header_Description::Header_Description()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_Description::InitAsDefaultInstance() {}

Header_Description::Header_Description(const Header_Description& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_Description::SharedCtor() {
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&_default_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_Description::~Header_Description() {
  SharedDtor();
}

void Header_Description::SharedDtor() {
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Header_Description::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Description_descriptor_;
}

const Header_Description& Header_Description::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

Header_Description* Header_Description::default_instance_ = NULL;

Header_Description* Header_Description::New() const {
  return new Header_Description;
}

void Header_Description::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
  }
  links_.Clear();
  authors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_description()));
        if (input->ExpectTag(18)) goto parse_links;
        break;
      }
      
      // repeated .decs.Header.Description.Link links = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_links:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_links()));
        if (input->ExpectTag(18)) goto parse_links;
        if (input->ExpectTag(26)) goto parse_authors;
        break;
      }
      
      // repeated .decs.Header.Description.Author authors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_authors:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_authors()));
        if (input->ExpectTag(26)) goto parse_authors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Header_Description::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->description(), output);
  }
  
  // repeated .decs.Header.Description.Link links = 2;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->links(i), output);
  }
  
  // repeated .decs.Header.Description.Author authors = 3;
  for (int i = 0; i < this->authors_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->authors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_Description::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->description(), target);
  }
  
  // repeated .decs.Header.Description.Link links = 2;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->links(i), target);
  }
  
  // repeated .decs.Header.Description.Author authors = 3;
  for (int i = 0; i < this->authors_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->authors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_Description::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->description());
    }
    
  }
  // repeated .decs.Header.Description.Link links = 2;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->links(i));
  }
  
  // repeated .decs.Header.Description.Author authors = 3;
  total_size += 1 * this->authors_size();
  for (int i = 0; i < this->authors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->authors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Header_Description::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_Description* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_Description*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_Description::MergeFrom(const Header_Description& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  authors_.MergeFrom(from.authors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_Description::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Description::CopyFrom(const Header_Description& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Description::Swap(Header_Description* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    links_.Swap(&other->links_);
    authors_.Swap(&other->authors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Header_Description::IsInitialized() const {
  
  for (int i = 0; i < links_size(); i++) {
    if (!this->links(i).IsInitialized()) return false;
  }
  for (int i = 0; i < authors_size(); i++) {
    if (!this->authors(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Header_Description::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Header_Description::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Header_Description_reflection_;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_ElementList::kElementsFieldNumber;
#endif  // !_MSC_VER

Header_ElementList::Header_ElementList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_ElementList::InitAsDefaultInstance() {}

Header_ElementList::Header_ElementList(const Header_ElementList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_ElementList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ElementList::~Header_ElementList() {
  SharedDtor();
}

void Header_ElementList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Header_ElementList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ElementList_descriptor_;
}

const Header_ElementList& Header_ElementList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

Header_ElementList* Header_ElementList::default_instance_ = NULL;

Header_ElementList* Header_ElementList::New() const {
  return new Header_ElementList;
}

void Header_ElementList::Clear() {
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ElementList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_elements:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_elements(value);
        if (input->ExpectTag(8)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_ElementList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Header_ElementList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->elements(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_ElementList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->elements(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_ElementList::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 elements = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->elements_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->elements(i));
    }
    total_size += 1 * this->elements_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Header_ElementList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ElementList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ElementList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ElementList::MergeFrom(const Header_ElementList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ElementList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ElementList::CopyFrom(const Header_ElementList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ElementList::Swap(Header_ElementList* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Header_ElementList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* Header_ElementList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Header_ElementList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Header_ElementList_reflection_;
}

// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Header_Problem_ResultStrategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Problem_ResultStrategy_descriptor_;
}
bool Header_Problem_ResultStrategy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Header_Problem_ResultStrategy Header_Problem::COUNT;
const Header_Problem_ResultStrategy Header_Problem::FULL;
const Header_Problem_ResultStrategy Header_Problem::ResultStrategy_MIN;
const Header_Problem_ResultStrategy Header_Problem::ResultStrategy_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Header_Problem::kDescriptionFieldNumber;
const int Header_Problem::kProblemIdFieldNumber;
const int Header_Problem::kSubProblemIdFieldNumber;
const int Header_Problem::kColumnCountFieldNumber;
const int Header_Problem::kElementCountFieldNumber;
const int Header_Problem::kRowsFieldNumber;
const int Header_Problem::kSecondaryColumnsFieldNumber;
const int Header_Problem::kInitVectorFieldNumber;
const int Header_Problem::kResultStrategyFieldNumber;
#endif  // !_MSC_VER

Header_Problem::Header_Problem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_Problem::InitAsDefaultInstance() {  description_ = const_cast< ::decs::Header_Description*>(&::decs::Header_Description::default_instance());
}

Header_Problem::Header_Problem(const Header_Problem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_Problem::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  problem_id_ = 0u;
  sub_problem_id_ = 0u;
  column_count_ = 0u;
  element_count_ = 0u;
  result_strategy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_Problem::~Header_Problem() {
  SharedDtor();
}

void Header_Problem::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

const ::google::protobuf::Descriptor* Header_Problem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Problem_descriptor_;
}

const Header_Problem& Header_Problem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

Header_Problem* Header_Problem::default_instance_ = NULL;

Header_Problem* Header_Problem::New() const {
  return new Header_Problem;
}

void Header_Problem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != NULL) description_->::decs::Header_Description::Clear();
    }
    problem_id_ = 0u;
    sub_problem_id_ = 0u;
    column_count_ = 0u;
    element_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    result_strategy_ = 0;
  }
  rows_.Clear();
  secondary_columns_.Clear();
  init_vector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_Problem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .decs.Header.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_description()));
        if (input->ExpectTag(16)) goto parse_problem_id;
        break;
      }
      
      // optional uint32 problem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &problem_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_sub_problem_id;
        break;
      }
      
      // optional uint32 sub_problem_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sub_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sub_problem_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_column_count;
        break;
      }
      
      // required uint32 column_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_column_count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &column_count_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_element_count;
        break;
      }
      
      // required uint32 element_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_element_count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &element_count_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_rows;
        break;
      }
      
      // repeated .decs.Header.ElementList rows = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rows:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_rows()));
        if (input->ExpectTag(50)) goto parse_rows;
        if (input->ExpectTag(56)) goto parse_secondary_columns;
        break;
      }
      
      // repeated uint32 secondary_columns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_secondary_columns:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_secondary_columns(value);
        if (input->ExpectTag(56)) goto parse_secondary_columns;
        if (input->ExpectTag(64)) goto parse_init_vector;
        break;
      }
      
      // repeated uint32 init_vector = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_init_vector:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_init_vector(value);
        if (input->ExpectTag(64)) goto parse_init_vector;
        if (input->ExpectTag(72)) goto parse_result_strategy;
        break;
      }
      
      // optional .decs.Header.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_result_strategy:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::decs::Header_Problem_ResultStrategy_IsValid(value)) {
          set_result_strategy(static_cast< ::decs::Header_Problem_ResultStrategy >(value));
        } else {
          mutable_unknown_fields()->AddVarint(9, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_Problem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Header_Problem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .decs.Header.Description description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->description(), output);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->problem_id(), output);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sub_problem_id(), output);
  }
  
  // required uint32 column_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->column_count(), output);
  }
  
  // required uint32 element_count = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->element_count(), output);
  }
  
  // repeated .decs.Header.ElementList rows = 6;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->rows(i), output);
  }
  
  // repeated uint32 secondary_columns = 7;
  for (int i = 0; i < this->secondary_columns_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->secondary_columns(i), output);
  }
  
  // repeated uint32 init_vector = 8;
  for (int i = 0; i < this->init_vector_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->init_vector(i), output);
  }
  
  // optional .decs.Header.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(9, this->result_strategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_Problem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .decs.Header.Description description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->description(), target);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->problem_id(), target);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sub_problem_id(), target);
  }
  
  // required uint32 column_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->column_count(), target);
  }
  
  // required uint32 element_count = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->element_count(), target);
  }
  
  // repeated .decs.Header.ElementList rows = 6;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->rows(i), target);
  }
  
  // repeated uint32 secondary_columns = 7;
  for (int i = 0; i < this->secondary_columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->secondary_columns(i), target);
  }
  
  // repeated uint32 init_vector = 8;
  for (int i = 0; i < this->init_vector_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->init_vector(i), target);
  }
  
  // optional .decs.Header.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(9, this->result_strategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_Problem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .decs.Header.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->description());
    }
    
    // optional uint32 problem_id = 2;
    if (has_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->problem_id());
    }
    
    // optional uint32 sub_problem_id = 3;
    if (has_sub_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sub_problem_id());
    }
    
    // required uint32 column_count = 4;
    if (has_column_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->column_count());
    }
    
    // required uint32 element_count = 5;
    if (has_element_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->element_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .decs.Header.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
    if (has_result_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->result_strategy());
    }
    
  }
  // repeated .decs.Header.ElementList rows = 6;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->rows(i));
  }
  
  // repeated uint32 secondary_columns = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->secondary_columns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->secondary_columns(i));
    }
    total_size += 1 * this->secondary_columns_size() + data_size;
  }
  
  // repeated uint32 init_vector = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->init_vector_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->init_vector(i));
    }
    total_size += 1 * this->init_vector_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Header_Problem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_Problem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_Problem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_Problem::MergeFrom(const Header_Problem& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  secondary_columns_.MergeFrom(from.secondary_columns_);
  init_vector_.MergeFrom(from.init_vector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_description()->::decs::Header_Description::MergeFrom(from.description());
    }
    if (from._has_bit(1)) {
      set_problem_id(from.problem_id());
    }
    if (from._has_bit(2)) {
      set_sub_problem_id(from.sub_problem_id());
    }
    if (from._has_bit(3)) {
      set_column_count(from.column_count());
    }
    if (from._has_bit(4)) {
      set_element_count(from.element_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_result_strategy(from.result_strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_Problem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Problem::CopyFrom(const Header_Problem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Problem::Swap(Header_Problem* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(problem_id_, other->problem_id_);
    std::swap(sub_problem_id_, other->sub_problem_id_);
    std::swap(column_count_, other->column_count_);
    std::swap(element_count_, other->element_count_);
    rows_.Swap(&other->rows_);
    secondary_columns_.Swap(&other->secondary_columns_);
    init_vector_.Swap(&other->init_vector_);
    std::swap(result_strategy_, other->result_strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Header_Problem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Header_Problem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Header_Problem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Header_Problem_reflection_;
}

// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Header_Result_ResultState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Result_ResultState_descriptor_;
}
bool Header_Result_ResultState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Header_Result_ResultState Header_Result::COMPLETE;
const Header_Result_ResultState Header_Result::PARTIAL;
const Header_Result_ResultState Header_Result::ResultState_MIN;
const Header_Result_ResultState Header_Result::ResultState_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Header_Result::kDescriptionFieldNumber;
const int Header_Result::kProblemIdFieldNumber;
const int Header_Result::kSubProblemIdFieldNumber;
const int Header_Result::kSolutionCountFieldNumber;
const int Header_Result::kSolutionsFieldNumber;
const int Header_Result::kStateFieldNumber;
#endif  // !_MSC_VER

Header_Result::Header_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_Result::InitAsDefaultInstance() {  description_ = const_cast< ::decs::Header_Description*>(&::decs::Header_Description::default_instance());
}

Header_Result::Header_Result(const Header_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_Result::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  problem_id_ = 0u;
  sub_problem_id_ = 0u;
  solution_count_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_Result::~Header_Result() {
  SharedDtor();
}

void Header_Result::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

const ::google::protobuf::Descriptor* Header_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Result_descriptor_;
}

const Header_Result& Header_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

Header_Result* Header_Result::default_instance_ = NULL;

Header_Result* Header_Result::New() const {
  return new Header_Result;
}

void Header_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != NULL) description_->::decs::Header_Description::Clear();
    }
    problem_id_ = 0u;
    sub_problem_id_ = 0u;
    solution_count_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  solutions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .decs.Header.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_description()));
        if (input->ExpectTag(16)) goto parse_problem_id;
        break;
      }
      
      // optional uint32 problem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &problem_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_sub_problem_id;
        break;
      }
      
      // optional uint32 sub_problem_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sub_problem_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sub_problem_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_solution_count;
        break;
      }
      
      // required uint64 solution_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_solution_count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &solution_count_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_solutions;
        break;
      }
      
      // repeated .decs.Header.ElementList solutions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_solutions:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_solutions()));
        if (input->ExpectTag(42)) goto parse_solutions;
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }
      
      // optional .decs.Header.Result.ResultState state = 6 [default = COMPLETE];
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_state:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::decs::Header_Result_ResultState_IsValid(value)) {
          set_state(static_cast< ::decs::Header_Result_ResultState >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Header_Result::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .decs.Header.Description description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->description(), output);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->problem_id(), output);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sub_problem_id(), output);
  }
  
  // required uint64 solution_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->solution_count(), output);
  }
  
  // repeated .decs.Header.ElementList solutions = 5;
  for (int i = 0; i < this->solutions_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->solutions(i), output);
  }
  
  // optional .decs.Header.Result.ResultState state = 6 [default = COMPLETE];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(6, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .decs.Header.Description description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->description(), target);
  }
  
  // optional uint32 problem_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->problem_id(), target);
  }
  
  // optional uint32 sub_problem_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sub_problem_id(), target);
  }
  
  // required uint64 solution_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->solution_count(), target);
  }
  
  // repeated .decs.Header.ElementList solutions = 5;
  for (int i = 0; i < this->solutions_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->solutions(i), target);
  }
  
  // optional .decs.Header.Result.ResultState state = 6 [default = COMPLETE];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(6, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .decs.Header.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->description());
    }
    
    // optional uint32 problem_id = 2;
    if (has_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->problem_id());
    }
    
    // optional uint32 sub_problem_id = 3;
    if (has_sub_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sub_problem_id());
    }
    
    // required uint64 solution_count = 4;
    if (has_solution_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->solution_count());
    }
    
    // optional .decs.Header.Result.ResultState state = 6 [default = COMPLETE];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->state());
    }
    
  }
  // repeated .decs.Header.ElementList solutions = 5;
  total_size += 1 * this->solutions_size();
  for (int i = 0; i < this->solutions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->solutions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Header_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_Result::MergeFrom(const Header_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  solutions_.MergeFrom(from.solutions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_description()->::decs::Header_Description::MergeFrom(from.description());
    }
    if (from._has_bit(1)) {
      set_problem_id(from.problem_id());
    }
    if (from._has_bit(2)) {
      set_sub_problem_id(from.sub_problem_id());
    }
    if (from._has_bit(3)) {
      set_solution_count(from.solution_count());
    }
    if (from._has_bit(5)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Result::CopyFrom(const Header_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Result::Swap(Header_Result* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(problem_id_, other->problem_id_);
    std::swap(sub_problem_id_, other->sub_problem_id_);
    std::swap(solution_count_, other->solution_count_);
    solutions_.Swap(&other->solutions_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Header_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Header_Result::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Header_Result::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Header_Result_reflection_;
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header::kDescriptionFieldNumber;
const int Header::kProblemsFieldNumber;
const int Header::kResultsFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {  description_ = const_cast< ::decs::Header_Description*>(&::decs::Header_Description::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decs_2eproto();  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (description_ != NULL) description_->::decs::Header_Description::Clear();
    }
  }
  problems_.Clear();
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .decs.Header.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_description()));
        if (input->ExpectTag(18)) goto parse_problems;
        break;
      }
      
      // repeated .decs.Header.Problem problems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_problems:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_problems()));
        if (input->ExpectTag(18)) goto parse_problems;
        if (input->ExpectTag(26)) goto parse_results;
        break;
      }
      
      // repeated .decs.Header.Result results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_results:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_results()));
        if (input->ExpectTag(26)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Header::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .decs.Header.Description description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->description(), output);
  }
  
  // repeated .decs.Header.Problem problems = 2;
  for (int i = 0; i < this->problems_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->problems(i), output);
  }
  
  // repeated .decs.Header.Result results = 3;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->results(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .decs.Header.Description description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->description(), target);
  }
  
  // repeated .decs.Header.Problem problems = 2;
  for (int i = 0; i < this->problems_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->problems(i), target);
  }
  
  // repeated .decs.Header.Result results = 3;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->results(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .decs.Header.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->description());
    }
    
  }
  // repeated .decs.Header.Problem problems = 2;
  total_size += 1 * this->problems_size();
  for (int i = 0; i < this->problems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->problems(i));
  }
  
  // repeated .decs.Header.Result results = 3;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->results(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  problems_.MergeFrom(from.problems_);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_description()->::decs::Header_Description::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    problems_.Swap(&other->problems_);
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Header::IsInitialized() const {
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  for (int i = 0; i < problems_size(); i++) {
    if (!this->problems(i).IsInitialized()) return false;
  }
  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Header::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Header::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Header_reflection_;
}

}  // namespace decs
