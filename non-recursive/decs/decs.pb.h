// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_decs_2eproto__INCLUDED
#define PROTOBUF_decs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace decs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_decs_2eproto();
void protobuf_AssignDesc_decs_2eproto();
void protobuf_ShutdownFile_decs_2eproto();

class DataFile;
class DataFile_Description;
class DataFile_Description_Link;
class DataFile_Description_Author;
class DataFile_ElementList;
class DataFile_Problem;
class DataFile_Result;

enum DataFile_Problem_ResultStrategy {
  DataFile_Problem_ResultStrategy_COUNT = 0,
  DataFile_Problem_ResultStrategy_FULL = 1
};
const ::google::protobuf::EnumDescriptor* DataFile_Problem_ResultStrategy_descriptor();
bool DataFile_Problem_ResultStrategy_IsValid(int value);
const DataFile_Problem_ResultStrategy DataFile_Problem_ResultStrategy_ResultStrategy_MIN = DataFile_Problem_ResultStrategy_COUNT;
const DataFile_Problem_ResultStrategy DataFile_Problem_ResultStrategy_ResultStrategy_MAX = DataFile_Problem_ResultStrategy_FULL;

inline const ::std::string& DataFile_Problem_ResultStrategy_Name(DataFile_Problem_ResultStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataFile_Problem_ResultStrategy_descriptor(), value);
}
inline bool DataFile_Problem_ResultStrategy_Parse(
    const ::std::string& name, DataFile_Problem_ResultStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataFile_Problem_ResultStrategy>(
    DataFile_Problem_ResultStrategy_descriptor(), name, value);
}
enum DataFile_Result_ResultState {
  DataFile_Result_ResultState_COMPLETE = 0,
  DataFile_Result_ResultState_PARTIAL = 1
};
const ::google::protobuf::EnumDescriptor* DataFile_Result_ResultState_descriptor();
bool DataFile_Result_ResultState_IsValid(int value);
const DataFile_Result_ResultState DataFile_Result_ResultState_ResultState_MIN = DataFile_Result_ResultState_COMPLETE;
const DataFile_Result_ResultState DataFile_Result_ResultState_ResultState_MAX = DataFile_Result_ResultState_PARTIAL;

inline const ::std::string& DataFile_Result_ResultState_Name(DataFile_Result_ResultState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataFile_Result_ResultState_descriptor(), value);
}
inline bool DataFile_Result_ResultState_Parse(
    const ::std::string& name, DataFile_Result_ResultState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataFile_Result_ResultState>(
    DataFile_Result_ResultState_descriptor(), name, value);
}
// ===================================================================

class DataFile_Description_Link : public ::google::protobuf::Message {
 public:
  DataFile_Description_Link();
  virtual ~DataFile_Description_Link();
  
  DataFile_Description_Link(const DataFile_Description_Link& from);
  
  inline DataFile_Description_Link& operator=(const DataFile_Description_Link& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFile_Description_Link& default_instance();
  void Swap(DataFile_Description_Link* other);
  
  // implements Message ----------------------------------------------
  
  DataFile_Description_Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataFile_Description_Link& from);
  void MergeFrom(const DataFile_Description_Link& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* description_;
  static const ::std::string _default_description_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataFile_Description_Link* default_instance_;
};
// -------------------------------------------------------------------

class DataFile_Description_Author : public ::google::protobuf::Message {
 public:
  DataFile_Description_Author();
  virtual ~DataFile_Description_Author();
  
  DataFile_Description_Author(const DataFile_Description_Author& from);
  
  inline DataFile_Description_Author& operator=(const DataFile_Description_Author& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFile_Description_Author& default_instance();
  void Swap(DataFile_Description_Author* other);
  
  // implements Message ----------------------------------------------
  
  DataFile_Description_Author* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataFile_Description_Author& from);
  void MergeFrom(const DataFile_Description_Author& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated .decs.DataFile.Description.Link link = 2;
  inline int link_size() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >& link() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >* mutable_link();
  inline const ::decs::DataFile_Description_Link& link(int index) const;
  inline ::decs::DataFile_Description_Link* mutable_link(int index);
  inline ::decs::DataFile_Description_Link* add_link();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link > link_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataFile_Description_Author* default_instance_;
};
// -------------------------------------------------------------------

class DataFile_Description : public ::google::protobuf::Message {
 public:
  DataFile_Description();
  virtual ~DataFile_Description();
  
  DataFile_Description(const DataFile_Description& from);
  
  inline DataFile_Description& operator=(const DataFile_Description& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFile_Description& default_instance();
  void Swap(DataFile_Description* other);
  
  // implements Message ----------------------------------------------
  
  DataFile_Description* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataFile_Description& from);
  void MergeFrom(const DataFile_Description& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataFile_Description_Link Link;
  typedef DataFile_Description_Author Author;
  
  // accessors -------------------------------------------------------
  
  // optional string description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  
  // repeated .decs.DataFile.Description.Link link = 2;
  inline int link_size() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >& link() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >* mutable_link();
  inline const ::decs::DataFile_Description_Link& link(int index) const;
  inline ::decs::DataFile_Description_Link* mutable_link(int index);
  inline ::decs::DataFile_Description_Link* add_link();
  
  // repeated .decs.DataFile.Description.Author author = 3;
  inline int author_size() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Author >& author() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Author >* mutable_author();
  inline const ::decs::DataFile_Description_Author& author(int index) const;
  inline ::decs::DataFile_Description_Author* mutable_author(int index);
  inline ::decs::DataFile_Description_Author* add_author();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* description_;
  static const ::std::string _default_description_;
  ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link > link_;
  ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Author > author_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataFile_Description* default_instance_;
};
// -------------------------------------------------------------------

class DataFile_ElementList : public ::google::protobuf::Message {
 public:
  DataFile_ElementList();
  virtual ~DataFile_ElementList();
  
  DataFile_ElementList(const DataFile_ElementList& from);
  
  inline DataFile_ElementList& operator=(const DataFile_ElementList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFile_ElementList& default_instance();
  void Swap(DataFile_ElementList* other);
  
  // implements Message ----------------------------------------------
  
  DataFile_ElementList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataFile_ElementList& from);
  void MergeFrom(const DataFile_ElementList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 element = 1;
  inline int element_size() const;
  inline void clear_element();
  static const int kElementFieldNumber = 1;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& element() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_element();
  inline ::google::protobuf::uint32 element(int index) const;
  inline void set_element(int index, ::google::protobuf::uint32 value);
  inline void add_element(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > element_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataFile_ElementList* default_instance_;
};
// -------------------------------------------------------------------

class DataFile_Problem : public ::google::protobuf::Message {
 public:
  DataFile_Problem();
  virtual ~DataFile_Problem();
  
  DataFile_Problem(const DataFile_Problem& from);
  
  inline DataFile_Problem& operator=(const DataFile_Problem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFile_Problem& default_instance();
  void Swap(DataFile_Problem* other);
  
  // implements Message ----------------------------------------------
  
  DataFile_Problem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataFile_Problem& from);
  void MergeFrom(const DataFile_Problem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataFile_Problem_ResultStrategy ResultStrategy;
  static const ResultStrategy COUNT = DataFile_Problem_ResultStrategy_COUNT;
  static const ResultStrategy FULL = DataFile_Problem_ResultStrategy_FULL;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultStrategy_descriptor() {
    return DataFile_Problem_ResultStrategy_descriptor();
  }
  static inline bool ResultStrategy_IsValid(int value) {
    return DataFile_Problem_ResultStrategy_IsValid(value);
  }
  static inline const ::std::string& ResultStrategy_Name(ResultStrategy value) {
    return DataFile_Problem_ResultStrategy_Name(value);
  }
  static inline bool ResultStrategy_Parse(const ::std::string& name,
      ResultStrategy* value) {
    return DataFile_Problem_ResultStrategy_Parse(name, value);
  }
  static const ResultStrategy ResultStrategy_MIN =
    DataFile_Problem_ResultStrategy_ResultStrategy_MIN;
  static const ResultStrategy ResultStrategy_MAX =
    DataFile_Problem_ResultStrategy_ResultStrategy_MAX;
  
  // accessors -------------------------------------------------------
  
  // optional .decs.DataFile.Description description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::decs::DataFile_Description& description() const;
  inline ::decs::DataFile_Description* mutable_description();
  
  // optional uint32 problem_id = 2;
  inline bool has_problem_id() const;
  inline void clear_problem_id();
  static const int kProblemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 problem_id() const;
  inline void set_problem_id(::google::protobuf::uint32 value);
  
  // optional uint32 sub_problem_id = 3;
  inline bool has_sub_problem_id() const;
  inline void clear_sub_problem_id();
  static const int kSubProblemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sub_problem_id() const;
  inline void set_sub_problem_id(::google::protobuf::uint32 value);
  
  // required uint32 column_count = 4;
  inline bool has_column_count() const;
  inline void clear_column_count();
  static const int kColumnCountFieldNumber = 4;
  inline ::google::protobuf::uint32 column_count() const;
  inline void set_column_count(::google::protobuf::uint32 value);
  
  // required uint32 element_count = 5;
  inline bool has_element_count() const;
  inline void clear_element_count();
  static const int kElementCountFieldNumber = 5;
  inline ::google::protobuf::uint32 element_count() const;
  inline void set_element_count(::google::protobuf::uint32 value);
  
  // repeated .decs.DataFile.ElementList row = 6;
  inline int row_size() const;
  inline void clear_row();
  static const int kRowFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >& row() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >* mutable_row();
  inline const ::decs::DataFile_ElementList& row(int index) const;
  inline ::decs::DataFile_ElementList* mutable_row(int index);
  inline ::decs::DataFile_ElementList* add_row();
  
  // repeated uint32 secondary_column = 7;
  inline int secondary_column_size() const;
  inline void clear_secondary_column();
  static const int kSecondaryColumnFieldNumber = 7;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& secondary_column() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_secondary_column();
  inline ::google::protobuf::uint32 secondary_column(int index) const;
  inline void set_secondary_column(int index, ::google::protobuf::uint32 value);
  inline void add_secondary_column(::google::protobuf::uint32 value);
  
  // repeated uint32 init_vector = 8;
  inline int init_vector_size() const;
  inline void clear_init_vector();
  static const int kInitVectorFieldNumber = 8;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& init_vector() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_init_vector();
  inline ::google::protobuf::uint32 init_vector(int index) const;
  inline void set_init_vector(int index, ::google::protobuf::uint32 value);
  inline void add_init_vector(::google::protobuf::uint32 value);
  
  // optional .decs.DataFile.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
  inline bool has_result_strategy() const;
  inline void clear_result_strategy();
  static const int kResultStrategyFieldNumber = 9;
  inline ::decs::DataFile_Problem_ResultStrategy result_strategy() const;
  inline void set_result_strategy(::decs::DataFile_Problem_ResultStrategy value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::decs::DataFile_Description* description_;
  ::google::protobuf::uint32 problem_id_;
  ::google::protobuf::uint32 sub_problem_id_;
  ::google::protobuf::uint32 column_count_;
  ::google::protobuf::uint32 element_count_;
  ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList > row_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > secondary_column_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > init_vector_;
  int result_strategy_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataFile_Problem* default_instance_;
};
// -------------------------------------------------------------------

class DataFile_Result : public ::google::protobuf::Message {
 public:
  DataFile_Result();
  virtual ~DataFile_Result();
  
  DataFile_Result(const DataFile_Result& from);
  
  inline DataFile_Result& operator=(const DataFile_Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFile_Result& default_instance();
  void Swap(DataFile_Result* other);
  
  // implements Message ----------------------------------------------
  
  DataFile_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataFile_Result& from);
  void MergeFrom(const DataFile_Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataFile_Result_ResultState ResultState;
  static const ResultState COMPLETE = DataFile_Result_ResultState_COMPLETE;
  static const ResultState PARTIAL = DataFile_Result_ResultState_PARTIAL;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultState_descriptor() {
    return DataFile_Result_ResultState_descriptor();
  }
  static inline bool ResultState_IsValid(int value) {
    return DataFile_Result_ResultState_IsValid(value);
  }
  static inline const ::std::string& ResultState_Name(ResultState value) {
    return DataFile_Result_ResultState_Name(value);
  }
  static inline bool ResultState_Parse(const ::std::string& name,
      ResultState* value) {
    return DataFile_Result_ResultState_Parse(name, value);
  }
  static const ResultState ResultState_MIN =
    DataFile_Result_ResultState_ResultState_MIN;
  static const ResultState ResultState_MAX =
    DataFile_Result_ResultState_ResultState_MAX;
  
  // accessors -------------------------------------------------------
  
  // optional .decs.DataFile.Description description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::decs::DataFile_Description& description() const;
  inline ::decs::DataFile_Description* mutable_description();
  
  // optional uint32 problem_id = 2;
  inline bool has_problem_id() const;
  inline void clear_problem_id();
  static const int kProblemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 problem_id() const;
  inline void set_problem_id(::google::protobuf::uint32 value);
  
  // optional uint32 sub_problem_id = 3;
  inline bool has_sub_problem_id() const;
  inline void clear_sub_problem_id();
  static const int kSubProblemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sub_problem_id() const;
  inline void set_sub_problem_id(::google::protobuf::uint32 value);
  
  // required uint64 solution_count = 4;
  inline bool has_solution_count() const;
  inline void clear_solution_count();
  static const int kSolutionCountFieldNumber = 4;
  inline ::google::protobuf::uint64 solution_count() const;
  inline void set_solution_count(::google::protobuf::uint64 value);
  
  // repeated .decs.DataFile.ElementList solution = 5;
  inline int solution_size() const;
  inline void clear_solution();
  static const int kSolutionFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >& solution() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >* mutable_solution();
  inline const ::decs::DataFile_ElementList& solution(int index) const;
  inline ::decs::DataFile_ElementList* mutable_solution(int index);
  inline ::decs::DataFile_ElementList* add_solution();
  
  // optional .decs.DataFile.Result.ResultState state = 6 [default = COMPLETE];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::decs::DataFile_Result_ResultState state() const;
  inline void set_state(::decs::DataFile_Result_ResultState value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::decs::DataFile_Description* description_;
  ::google::protobuf::uint32 problem_id_;
  ::google::protobuf::uint32 sub_problem_id_;
  ::google::protobuf::uint64 solution_count_;
  ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList > solution_;
  int state_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataFile_Result* default_instance_;
};
// -------------------------------------------------------------------

class DataFile : public ::google::protobuf::Message {
 public:
  DataFile();
  virtual ~DataFile();
  
  DataFile(const DataFile& from);
  
  inline DataFile& operator=(const DataFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFile& default_instance();
  void Swap(DataFile* other);
  
  // implements Message ----------------------------------------------
  
  DataFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataFile& from);
  void MergeFrom(const DataFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataFile_Description Description;
  typedef DataFile_ElementList ElementList;
  typedef DataFile_Problem Problem;
  typedef DataFile_Result Result;
  
  // accessors -------------------------------------------------------
  
  // optional .decs.DataFile.Description description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::decs::DataFile_Description& description() const;
  inline ::decs::DataFile_Description* mutable_description();
  
  // repeated .decs.DataFile.Problem problem = 2;
  inline int problem_size() const;
  inline void clear_problem();
  static const int kProblemFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Problem >& problem() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Problem >* mutable_problem();
  inline const ::decs::DataFile_Problem& problem(int index) const;
  inline ::decs::DataFile_Problem* mutable_problem(int index);
  inline ::decs::DataFile_Problem* add_problem();
  
  // repeated .decs.DataFile.Result result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Result >& result() const;
  inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Result >* mutable_result();
  inline const ::decs::DataFile_Result& result(int index) const;
  inline ::decs::DataFile_Result* mutable_result(int index);
  inline ::decs::DataFile_Result* add_result();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::decs::DataFile_Description* description_;
  ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Problem > problem_;
  ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Result > result_;
  friend void  protobuf_AddDesc_decs_2eproto();
  friend void protobuf_AssignDesc_decs_2eproto();
  friend void protobuf_ShutdownFile_decs_2eproto();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataFile* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// DataFile_Description_Link

// required string url = 1;
inline bool DataFile_Description_Link::has_url() const {
  return _has_bit(0);
}
inline void DataFile_Description_Link::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DataFile_Description_Link::url() const {
  return *url_;
}
inline void DataFile_Description_Link::set_url(const ::std::string& value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void DataFile_Description_Link::set_url(const char* value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void DataFile_Description_Link::set_url(const char* value, size_t size) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataFile_Description_Link::mutable_url() {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string description = 2;
inline bool DataFile_Description_Link::has_description() const {
  return _has_bit(1);
}
inline void DataFile_Description_Link::clear_description() {
  if (description_ != &_default_description_) {
    description_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DataFile_Description_Link::description() const {
  return *description_;
}
inline void DataFile_Description_Link::set_description(const ::std::string& value) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DataFile_Description_Link::set_description(const char* value) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DataFile_Description_Link::set_description(const char* value, size_t size) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataFile_Description_Link::mutable_description() {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  return description_;
}

// -------------------------------------------------------------------

// DataFile_Description_Author

// required string name = 1;
inline bool DataFile_Description_Author::has_name() const {
  return _has_bit(0);
}
inline void DataFile_Description_Author::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DataFile_Description_Author::name() const {
  return *name_;
}
inline void DataFile_Description_Author::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataFile_Description_Author::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataFile_Description_Author::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataFile_Description_Author::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated .decs.DataFile.Description.Link link = 2;
inline int DataFile_Description_Author::link_size() const {
  return link_.size();
}
inline void DataFile_Description_Author::clear_link() {
  link_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >&
DataFile_Description_Author::link() const {
  return link_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >*
DataFile_Description_Author::mutable_link() {
  return &link_;
}
inline const ::decs::DataFile_Description_Link& DataFile_Description_Author::link(int index) const {
  return link_.Get(index);
}
inline ::decs::DataFile_Description_Link* DataFile_Description_Author::mutable_link(int index) {
  return link_.Mutable(index);
}
inline ::decs::DataFile_Description_Link* DataFile_Description_Author::add_link() {
  return link_.Add();
}

// -------------------------------------------------------------------

// DataFile_Description

// optional string description = 1;
inline bool DataFile_Description::has_description() const {
  return _has_bit(0);
}
inline void DataFile_Description::clear_description() {
  if (description_ != &_default_description_) {
    description_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DataFile_Description::description() const {
  return *description_;
}
inline void DataFile_Description::set_description(const ::std::string& value) {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DataFile_Description::set_description(const char* value) {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DataFile_Description::set_description(const char* value, size_t size) {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataFile_Description::mutable_description() {
  _set_bit(0);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  return description_;
}

// repeated .decs.DataFile.Description.Link link = 2;
inline int DataFile_Description::link_size() const {
  return link_.size();
}
inline void DataFile_Description::clear_link() {
  link_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >&
DataFile_Description::link() const {
  return link_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Link >*
DataFile_Description::mutable_link() {
  return &link_;
}
inline const ::decs::DataFile_Description_Link& DataFile_Description::link(int index) const {
  return link_.Get(index);
}
inline ::decs::DataFile_Description_Link* DataFile_Description::mutable_link(int index) {
  return link_.Mutable(index);
}
inline ::decs::DataFile_Description_Link* DataFile_Description::add_link() {
  return link_.Add();
}

// repeated .decs.DataFile.Description.Author author = 3;
inline int DataFile_Description::author_size() const {
  return author_.size();
}
inline void DataFile_Description::clear_author() {
  author_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Author >&
DataFile_Description::author() const {
  return author_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Description_Author >*
DataFile_Description::mutable_author() {
  return &author_;
}
inline const ::decs::DataFile_Description_Author& DataFile_Description::author(int index) const {
  return author_.Get(index);
}
inline ::decs::DataFile_Description_Author* DataFile_Description::mutable_author(int index) {
  return author_.Mutable(index);
}
inline ::decs::DataFile_Description_Author* DataFile_Description::add_author() {
  return author_.Add();
}

// -------------------------------------------------------------------

// DataFile_ElementList

// repeated uint32 element = 1;
inline int DataFile_ElementList::element_size() const {
  return element_.size();
}
inline void DataFile_ElementList::clear_element() {
  element_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataFile_ElementList::element() const {
  return element_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataFile_ElementList::mutable_element() {
  return &element_;
}
inline ::google::protobuf::uint32 DataFile_ElementList::element(int index) const {
  return element_.Get(index);
}
inline void DataFile_ElementList::set_element(int index, ::google::protobuf::uint32 value) {
  element_.Set(index, value);
}
inline void DataFile_ElementList::add_element(::google::protobuf::uint32 value) {
  element_.Add(value);
}

// -------------------------------------------------------------------

// DataFile_Problem

// optional .decs.DataFile.Description description = 1;
inline bool DataFile_Problem::has_description() const {
  return _has_bit(0);
}
inline void DataFile_Problem::clear_description() {
  if (description_ != NULL) description_->::decs::DataFile_Description::Clear();
  _clear_bit(0);
}
inline const ::decs::DataFile_Description& DataFile_Problem::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::decs::DataFile_Description* DataFile_Problem::mutable_description() {
  _set_bit(0);
  if (description_ == NULL) description_ = new ::decs::DataFile_Description;
  return description_;
}

// optional uint32 problem_id = 2;
inline bool DataFile_Problem::has_problem_id() const {
  return _has_bit(1);
}
inline void DataFile_Problem::clear_problem_id() {
  problem_id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 DataFile_Problem::problem_id() const {
  return problem_id_;
}
inline void DataFile_Problem::set_problem_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  problem_id_ = value;
}

// optional uint32 sub_problem_id = 3;
inline bool DataFile_Problem::has_sub_problem_id() const {
  return _has_bit(2);
}
inline void DataFile_Problem::clear_sub_problem_id() {
  sub_problem_id_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 DataFile_Problem::sub_problem_id() const {
  return sub_problem_id_;
}
inline void DataFile_Problem::set_sub_problem_id(::google::protobuf::uint32 value) {
  _set_bit(2);
  sub_problem_id_ = value;
}

// required uint32 column_count = 4;
inline bool DataFile_Problem::has_column_count() const {
  return _has_bit(3);
}
inline void DataFile_Problem::clear_column_count() {
  column_count_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 DataFile_Problem::column_count() const {
  return column_count_;
}
inline void DataFile_Problem::set_column_count(::google::protobuf::uint32 value) {
  _set_bit(3);
  column_count_ = value;
}

// required uint32 element_count = 5;
inline bool DataFile_Problem::has_element_count() const {
  return _has_bit(4);
}
inline void DataFile_Problem::clear_element_count() {
  element_count_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 DataFile_Problem::element_count() const {
  return element_count_;
}
inline void DataFile_Problem::set_element_count(::google::protobuf::uint32 value) {
  _set_bit(4);
  element_count_ = value;
}

// repeated .decs.DataFile.ElementList row = 6;
inline int DataFile_Problem::row_size() const {
  return row_.size();
}
inline void DataFile_Problem::clear_row() {
  row_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >&
DataFile_Problem::row() const {
  return row_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >*
DataFile_Problem::mutable_row() {
  return &row_;
}
inline const ::decs::DataFile_ElementList& DataFile_Problem::row(int index) const {
  return row_.Get(index);
}
inline ::decs::DataFile_ElementList* DataFile_Problem::mutable_row(int index) {
  return row_.Mutable(index);
}
inline ::decs::DataFile_ElementList* DataFile_Problem::add_row() {
  return row_.Add();
}

// repeated uint32 secondary_column = 7;
inline int DataFile_Problem::secondary_column_size() const {
  return secondary_column_.size();
}
inline void DataFile_Problem::clear_secondary_column() {
  secondary_column_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataFile_Problem::secondary_column() const {
  return secondary_column_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataFile_Problem::mutable_secondary_column() {
  return &secondary_column_;
}
inline ::google::protobuf::uint32 DataFile_Problem::secondary_column(int index) const {
  return secondary_column_.Get(index);
}
inline void DataFile_Problem::set_secondary_column(int index, ::google::protobuf::uint32 value) {
  secondary_column_.Set(index, value);
}
inline void DataFile_Problem::add_secondary_column(::google::protobuf::uint32 value) {
  secondary_column_.Add(value);
}

// repeated uint32 init_vector = 8;
inline int DataFile_Problem::init_vector_size() const {
  return init_vector_.size();
}
inline void DataFile_Problem::clear_init_vector() {
  init_vector_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataFile_Problem::init_vector() const {
  return init_vector_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataFile_Problem::mutable_init_vector() {
  return &init_vector_;
}
inline ::google::protobuf::uint32 DataFile_Problem::init_vector(int index) const {
  return init_vector_.Get(index);
}
inline void DataFile_Problem::set_init_vector(int index, ::google::protobuf::uint32 value) {
  init_vector_.Set(index, value);
}
inline void DataFile_Problem::add_init_vector(::google::protobuf::uint32 value) {
  init_vector_.Add(value);
}

// optional .decs.DataFile.Problem.ResultStrategy result_strategy = 9 [default = COUNT];
inline bool DataFile_Problem::has_result_strategy() const {
  return _has_bit(8);
}
inline void DataFile_Problem::clear_result_strategy() {
  result_strategy_ = 0;
  _clear_bit(8);
}
inline ::decs::DataFile_Problem_ResultStrategy DataFile_Problem::result_strategy() const {
  return static_cast< ::decs::DataFile_Problem_ResultStrategy >(result_strategy_);
}
inline void DataFile_Problem::set_result_strategy(::decs::DataFile_Problem_ResultStrategy value) {
  GOOGLE_DCHECK(::decs::DataFile_Problem_ResultStrategy_IsValid(value));
  _set_bit(8);
  result_strategy_ = value;
}

// -------------------------------------------------------------------

// DataFile_Result

// optional .decs.DataFile.Description description = 1;
inline bool DataFile_Result::has_description() const {
  return _has_bit(0);
}
inline void DataFile_Result::clear_description() {
  if (description_ != NULL) description_->::decs::DataFile_Description::Clear();
  _clear_bit(0);
}
inline const ::decs::DataFile_Description& DataFile_Result::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::decs::DataFile_Description* DataFile_Result::mutable_description() {
  _set_bit(0);
  if (description_ == NULL) description_ = new ::decs::DataFile_Description;
  return description_;
}

// optional uint32 problem_id = 2;
inline bool DataFile_Result::has_problem_id() const {
  return _has_bit(1);
}
inline void DataFile_Result::clear_problem_id() {
  problem_id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 DataFile_Result::problem_id() const {
  return problem_id_;
}
inline void DataFile_Result::set_problem_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  problem_id_ = value;
}

// optional uint32 sub_problem_id = 3;
inline bool DataFile_Result::has_sub_problem_id() const {
  return _has_bit(2);
}
inline void DataFile_Result::clear_sub_problem_id() {
  sub_problem_id_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 DataFile_Result::sub_problem_id() const {
  return sub_problem_id_;
}
inline void DataFile_Result::set_sub_problem_id(::google::protobuf::uint32 value) {
  _set_bit(2);
  sub_problem_id_ = value;
}

// required uint64 solution_count = 4;
inline bool DataFile_Result::has_solution_count() const {
  return _has_bit(3);
}
inline void DataFile_Result::clear_solution_count() {
  solution_count_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 DataFile_Result::solution_count() const {
  return solution_count_;
}
inline void DataFile_Result::set_solution_count(::google::protobuf::uint64 value) {
  _set_bit(3);
  solution_count_ = value;
}

// repeated .decs.DataFile.ElementList solution = 5;
inline int DataFile_Result::solution_size() const {
  return solution_.size();
}
inline void DataFile_Result::clear_solution() {
  solution_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >&
DataFile_Result::solution() const {
  return solution_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_ElementList >*
DataFile_Result::mutable_solution() {
  return &solution_;
}
inline const ::decs::DataFile_ElementList& DataFile_Result::solution(int index) const {
  return solution_.Get(index);
}
inline ::decs::DataFile_ElementList* DataFile_Result::mutable_solution(int index) {
  return solution_.Mutable(index);
}
inline ::decs::DataFile_ElementList* DataFile_Result::add_solution() {
  return solution_.Add();
}

// optional .decs.DataFile.Result.ResultState state = 6 [default = COMPLETE];
inline bool DataFile_Result::has_state() const {
  return _has_bit(5);
}
inline void DataFile_Result::clear_state() {
  state_ = 0;
  _clear_bit(5);
}
inline ::decs::DataFile_Result_ResultState DataFile_Result::state() const {
  return static_cast< ::decs::DataFile_Result_ResultState >(state_);
}
inline void DataFile_Result::set_state(::decs::DataFile_Result_ResultState value) {
  GOOGLE_DCHECK(::decs::DataFile_Result_ResultState_IsValid(value));
  _set_bit(5);
  state_ = value;
}

// -------------------------------------------------------------------

// DataFile

// optional .decs.DataFile.Description description = 1;
inline bool DataFile::has_description() const {
  return _has_bit(0);
}
inline void DataFile::clear_description() {
  if (description_ != NULL) description_->::decs::DataFile_Description::Clear();
  _clear_bit(0);
}
inline const ::decs::DataFile_Description& DataFile::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::decs::DataFile_Description* DataFile::mutable_description() {
  _set_bit(0);
  if (description_ == NULL) description_ = new ::decs::DataFile_Description;
  return description_;
}

// repeated .decs.DataFile.Problem problem = 2;
inline int DataFile::problem_size() const {
  return problem_.size();
}
inline void DataFile::clear_problem() {
  problem_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Problem >&
DataFile::problem() const {
  return problem_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Problem >*
DataFile::mutable_problem() {
  return &problem_;
}
inline const ::decs::DataFile_Problem& DataFile::problem(int index) const {
  return problem_.Get(index);
}
inline ::decs::DataFile_Problem* DataFile::mutable_problem(int index) {
  return problem_.Mutable(index);
}
inline ::decs::DataFile_Problem* DataFile::add_problem() {
  return problem_.Add();
}

// repeated .decs.DataFile.Result result = 3;
inline int DataFile::result_size() const {
  return result_.size();
}
inline void DataFile::clear_result() {
  result_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Result >&
DataFile::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::decs::DataFile_Result >*
DataFile::mutable_result() {
  return &result_;
}
inline const ::decs::DataFile_Result& DataFile::result(int index) const {
  return result_.Get(index);
}
inline ::decs::DataFile_Result* DataFile::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::decs::DataFile_Result* DataFile::add_result() {
  return result_.Add();
}


}  // namespace decs
#endif  // PROTOBUF_decs_2eproto__INCLUDED
